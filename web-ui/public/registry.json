{
  "$schema": "https://buildwithclaude.com/schema/registry.json",
  "version": "1.0.0",
  "lastUpdated": "2025-08-07T13:34:54.795Z",
  "subagents": [
    {
      "name": "academic-research-synthesizer",
      "category": "specialized-domains",
      "description": "Synthesize academic research from multiple sources with citations. Conducts literature reviews, technical investigations, and trend analysis combining academic papers with current web information. Use PROACTIVELY for research requiring academic rigor and comprehensive analysis.",
      "version": "1.0.0",
      "file": "subagents/academic-research-synthesizer.md",
      "path": "academic-research-synthesizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "academic-researcher",
      "category": "specialized-domains",
      "description": "Find and analyze scholarly sources, research papers, and academic literature. Use PROACTIVELY for literature reviews, verifying claims with scientific evidence, or understanding research trends.",
      "version": "1.0.0",
      "file": "subagents/academic-researcher.md",
      "path": "academic-researcher",
      "tools": [],
      "tags": []
    },
    {
      "name": "accessibility-specialist",
      "category": "design-experience",
      "description": "Ensure web applications meet WCAG 2.1 AA/AAA standards. Implements ARIA attributes, keyboard navigation, and screen reader support. Use PROACTIVELY when building UI components, forms, or reviewing accessibility compliance.",
      "version": "1.0.0",
      "file": "subagents/accessibility-specialist.md",
      "path": "accessibility-specialist",
      "tools": [],
      "tags": []
    },
    {
      "name": "agent-expert",
      "category": "specialized-domains",
      "description": "Create and optimize specialized Claude Code agents. Expertise in agent design, prompt engineering, domain modeling, and best practices for claude-code-templates system. Use PROACTIVELY when designing new agents or improving existing ones.",
      "version": "1.0.0",
      "file": "subagents/agent-expert.md",
      "path": "agent-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "ai-engineer",
      "category": "data-ai",
      "description": "Build LLM applications, RAG systems, and prompt pipelines. Implements vector search, agent orchestration, and AI API integrations. Use PROACTIVELY for LLM features, chatbots, or AI-powered applications.",
      "version": "1.0.0",
      "file": "subagents/ai-engineer.md",
      "path": "ai-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "api-documenter",
      "category": "specialized-domains",
      "description": "Create OpenAPI/Swagger specs, generate SDKs, and write developer documentation. Handles versioning, examples, and interactive docs. Use PROACTIVELY for API documentation or client library generation.",
      "version": "1.0.0",
      "file": "subagents/api-documenter.md",
      "path": "api-documenter",
      "tools": [],
      "tags": []
    },
    {
      "name": "api-security-audit",
      "category": "quality-security",
      "description": "Conduct security audits for REST APIs and identify vulnerabilities. Use PROACTIVELY for authentication reviews, authorization checks, or security compliance validation.",
      "version": "1.0.0",
      "file": "subagents/api-security-audit.md",
      "path": "api-security-audit",
      "tools": [],
      "tags": []
    },
    {
      "name": "arbitrage-bot",
      "category": "crypto-trading",
      "description": "Identify and execute cryptocurrency arbitrage opportunities across exchanges and DeFi protocols. Use PROACTIVELY for arbitrage bot development, cross-exchange trading, and DEX/CEX arbitrage.",
      "version": "1.0.0",
      "file": "subagents/arbitrage-bot.md",
      "path": "arbitrage-bot",
      "tools": [],
      "tags": []
    },
    {
      "name": "architect-review",
      "category": "quality-security",
      "description": "Reviews code changes for architectural consistency and patterns. Use PROACTIVELY after any structural changes, new services, or API modifications. Ensures SOLID principles, proper layering, and maintainability.",
      "version": "1.0.0",
      "file": "subagents/architect-review.md",
      "path": "architect-review",
      "tools": [],
      "tags": []
    },
    {
      "name": "audio-quality-controller",
      "category": "specialized-domains",
      "description": "Analyzes, enhances, and standardizes audio quality for professional-grade content. Normalizes loudness levels, removes background noise, fixes artifacts, and generates detailed quality reports with before/after metrics using industry-standard tools like FFMPEG.",
      "version": "1.0.0",
      "file": "subagents/audio-quality-controller.md",
      "path": "audio-quality-controller",
      "tools": [],
      "tags": []
    },
    {
      "name": "backend-architect",
      "category": "development-architecture",
      "description": "Design RESTful APIs, microservice boundaries, and database schemas. Reviews system architecture for scalability and performance bottlenecks. Use PROACTIVELY when creating new backend services or APIs.",
      "version": "1.0.0",
      "file": "subagents/backend-architect.md",
      "path": "backend-architect",
      "tools": [],
      "tags": []
    },
    {
      "name": "blockchain-developer",
      "category": "blockchain-web3",
      "description": "Develop smart contracts, DeFi protocols, and Web3 applications. Expertise in Solidity, security auditing, and gas optimization. Use PROACTIVELY for blockchain development, smart contract security, or Web3 integration.",
      "version": "1.0.0",
      "file": "subagents/blockchain-developer.md",
      "path": "blockchain-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "business-analyst",
      "category": "business-finance",
      "description": "Analyze metrics, create reports, and track KPIs. Builds dashboards, revenue models, and growth projections. Use PROACTIVELY for business metrics or investor updates.",
      "version": "1.0.0",
      "file": "subagents/business-analyst.md",
      "path": "business-analyst",
      "tools": [],
      "tags": []
    },
    {
      "name": "c-developer",
      "category": "language-specialists",
      "description": "C programming expert for systems programming and embedded development. Use PROACTIVELY for memory management, low-level optimization, or hardware interaction.",
      "version": "1.0.0",
      "file": "subagents/c-developer.md",
      "path": "c-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "cloud-architect",
      "category": "infrastructure-operations",
      "description": "Design AWS/Azure/GCP infrastructure, implement Terraform IaC, and optimize cloud costs. Handles auto-scaling, multi-region deployments, and serverless architectures. Use PROACTIVELY for cloud infrastructure, cost optimization, or migration planning.",
      "version": "1.0.0",
      "file": "subagents/cloud-architect.md",
      "path": "cloud-architect",
      "tools": [],
      "tags": []
    },
    {
      "name": "code-reviewer",
      "category": "quality-security",
      "description": "Expert code review specialist. Proactively reviews code for quality, security, and maintainability. Use immediately after writing or modifying code.",
      "version": "1.0.0",
      "file": "subagents/code-reviewer.md",
      "path": "code-reviewer",
      "tools": [],
      "tags": []
    },
    {
      "name": "command-expert",
      "category": "quality-security",
      "description": "Create CLI commands for automation and tooling. Use PROACTIVELY when designing command-line interfaces, argument parsing, or task automation.",
      "version": "1.0.0",
      "file": "subagents/command-expert.md",
      "path": "command-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "comprehensive-researcher",
      "category": "specialized-domains",
      "description": "Conduct in-depth research with multiple sources, cross-verification, and structured reports. Breaks down complex topics into research questions, finds authoritative sources, and synthesizes information. Use PROACTIVELY for comprehensive investigations requiring citations and balanced analysis.",
      "version": "1.0.0",
      "file": "subagents/comprehensive-researcher.md",
      "path": "comprehensive-researcher",
      "tools": [],
      "tags": []
    },
    {
      "name": "connection-agent",
      "category": "specialized-domains",
      "description": "Analyzes and suggests meaningful links between related content in knowledge management systems. Identifies entity-based connections, keyword overlaps, orphaned notes, and generates actionable link suggestions for manual curation.",
      "version": "1.0.0",
      "file": "subagents/connection-agent.md",
      "path": "connection-agent",
      "tools": [],
      "tags": []
    },
    {
      "name": "content-marketer",
      "category": "sales-marketing",
      "description": "Write blog posts, social media content, and email newsletters. Optimizes for SEO and creates content calendars. Use PROACTIVELY for marketing content or social media posts.",
      "version": "1.0.0",
      "file": "subagents/content-marketer.md",
      "path": "content-marketer",
      "tools": [],
      "tags": []
    },
    {
      "name": "context-manager",
      "category": "data-ai",
      "description": "Manages context across multiple agents and long-running tasks. Use PROACTIVELY when coordinating complex multi-agent workflows or when context needs to be preserved across multiple sessions. MUST BE USED for projects exceeding 10k tokens.",
      "version": "1.0.0",
      "file": "subagents/context-manager.md",
      "path": "context-manager",
      "tools": [],
      "tags": []
    },
    {
      "name": "cpp-engineer",
      "category": "language-specialists",
      "description": "Write idiomatic C++ code with modern features, RAII, smart pointers, and STL algorithms. Handles templates, move semantics, and performance optimization. Use PROACTIVELY for C++ refactoring, memory safety, or complex C++ patterns.",
      "version": "1.0.0",
      "file": "subagents/cpp-engineer.md",
      "path": "cpp-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "crypto-analyst",
      "category": "crypto-trading",
      "description": "Perform cryptocurrency market analysis, on-chain analytics, and sentiment analysis. Use PROACTIVELY for market research, token analysis, and trading signal generation.",
      "version": "1.0.0",
      "file": "subagents/crypto-analyst.md",
      "path": "crypto-analyst",
      "tools": [],
      "tags": []
    },
    {
      "name": "crypto-risk-manager",
      "category": "crypto-trading",
      "description": "Implement risk management systems for cryptocurrency trading and DeFi positions. Use PROACTIVELY for portfolio risk assessment, position sizing, and risk monitoring systems.",
      "version": "1.0.0",
      "file": "subagents/crypto-risk-manager.md",
      "path": "crypto-risk-manager",
      "tools": [],
      "tags": []
    },
    {
      "name": "crypto-trader",
      "category": "crypto-trading",
      "description": "Build cryptocurrency trading systems, implement trading strategies, and integrate with exchange APIs. Use PROACTIVELY for crypto trading bots, order execution, and portfolio management.",
      "version": "1.0.0",
      "file": "subagents/crypto-trader.md",
      "path": "crypto-trader",
      "tools": [],
      "tags": []
    },
    {
      "name": "customer-support",
      "category": "sales-marketing",
      "description": "Handle support tickets, FAQ responses, and customer emails. Creates help docs, troubleshooting guides, and canned responses. Use PROACTIVELY for customer inquiries or support documentation.",
      "version": "1.0.0",
      "file": "subagents/customer-support.md",
      "path": "customer-support",
      "tools": [],
      "tags": []
    },
    {
      "name": "data-analyst",
      "category": "specialized-domains",
      "description": "Quantitative analysis, statistical insights, and data-driven research. Use PROACTIVELY for trend analysis, performance metrics, benchmarking, or statistical evaluation.",
      "version": "1.0.0",
      "file": "subagents/data-analyst.md",
      "path": "data-analyst",
      "tools": [],
      "tags": []
    },
    {
      "name": "data-engineer",
      "category": "data-ai",
      "description": "Build ETL pipelines, data warehouses, and streaming architectures. Implements Spark jobs, Airflow DAGs, and Kafka streams. Use PROACTIVELY for data pipeline design or analytics infrastructure.",
      "version": "1.0.0",
      "file": "subagents/data-engineer.md",
      "path": "data-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "data-scientist",
      "category": "data-ai",
      "description": "Data analysis expert for SQL queries, BigQuery operations, and data insights. Use proactively for data analysis tasks and queries.",
      "version": "1.0.0",
      "file": "subagents/data-scientist.md",
      "path": "data-scientist",
      "tools": [],
      "tags": []
    },
    {
      "name": "database-admin",
      "category": "infrastructure-operations",
      "description": "Manage database operations, backups, replication, and monitoring. Handles user permissions, maintenance tasks, and disaster recovery. Use PROACTIVELY for database setup, operational issues, or recovery procedures.",
      "version": "1.0.0",
      "file": "subagents/database-admin.md",
      "path": "database-admin",
      "tools": [],
      "tags": []
    },
    {
      "name": "database-optimization",
      "category": "infrastructure-operations",
      "description": "Database performance specialist focusing on query optimization, indexing strategies, schema design, connection pooling, and database monitoring. Covers SQL optimization, NoSQL tuning, and architecture best practices.",
      "version": "1.0.0",
      "file": "subagents/database-optimization.md",
      "path": "database-optimization",
      "tools": [],
      "tags": []
    },
    {
      "name": "database-optimizer",
      "category": "infrastructure-operations",
      "description": "Optimize SQL queries, design efficient indexes, and handle database migrations. Solves N+1 problems, slow queries, and implements caching. Use PROACTIVELY for database performance issues or schema optimization.",
      "version": "1.0.0",
      "file": "subagents/database-optimizer.md",
      "path": "database-optimizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "debugger",
      "category": "quality-security",
      "description": "Debugging specialist for errors, test failures, and unexpected behavior. Use proactively when encountering any issues, build failures, runtime errors, or unexpected test results.",
      "version": "1.0.0",
      "file": "subagents/debugger.md",
      "path": "debugger",
      "tools": [],
      "tags": []
    },
    {
      "name": "defi-strategist",
      "category": "crypto-trading",
      "description": "Design and implement DeFi yield strategies, liquidity provision, and protocol interactions. Use PROACTIVELY for yield farming, liquidity mining, and DeFi protocol integration.",
      "version": "1.0.0",
      "file": "subagents/defi-strategist.md",
      "path": "defi-strategist",
      "tools": [],
      "tags": []
    },
    {
      "name": "deployment-engineer",
      "category": "infrastructure-operations",
      "description": "Configure CI/CD pipelines, Docker containers, and cloud deployments. Handles GitHub Actions, Kubernetes, and infrastructure automation. Use PROACTIVELY when setting up deployments, containers, or CI/CD workflows.",
      "version": "1.0.0",
      "file": "subagents/deployment-engineer.md",
      "path": "deployment-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "devops-troubleshooter",
      "category": "infrastructure-operations",
      "description": "Debug production issues, analyze logs, and fix deployment failures. Masters monitoring tools, incident response, and root cause analysis. Use PROACTIVELY for production debugging or system outages.",
      "version": "1.0.0",
      "file": "subagents/devops-troubleshooter.md",
      "path": "devops-troubleshooter",
      "tools": [],
      "tags": []
    },
    {
      "name": "directus-developer",
      "category": "development-architecture",
      "description": "Build and customize Directus applications with extensions, hooks, and API integrations. Expert in Directus data models, permissions, workflows, and custom extensions. Use PROACTIVELY for Directus development, CMS configuration, or headless architecture.",
      "version": "1.0.0",
      "file": "subagents/directus-developer.md",
      "path": "directus-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "docusaurus-expert",
      "category": "specialized-domains",
      "description": "Configure and troubleshoot Docusaurus documentation sites. Specializes in configuration, theming, content management, sidebar organization, and build issues. Use PROACTIVELY when working with Docusaurus v2/v3 sites, especially in docs_to_claude folder.",
      "version": "1.0.0",
      "file": "subagents/docusaurus-expert.md",
      "path": "docusaurus-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "drupal-developer",
      "category": "development-architecture",
      "description": "Build and customize Drupal applications with custom modules, themes, and integrations. Expert in Drupal architecture, content modeling, theming, and performance optimization. Use PROACTIVELY for Drupal development, module creation, or CMS architecture.",
      "version": "1.0.0",
      "file": "subagents/drupal-developer.md",
      "path": "drupal-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "dx-optimizer",
      "category": "quality-security",
      "description": "Developer Experience specialist. Improves tooling, setup, and workflows. Use PROACTIVELY when setting up new projects, after team feedback, or when development friction is noticed.",
      "version": "1.0.0",
      "file": "subagents/dx-optimizer.md",
      "path": "dx-optimizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "episode-orchestrator",
      "category": "specialized-domains",
      "description": "Manages episode-based workflows by coordinating multiple specialized agents in sequence. Detects complete episode details and dispatches to predefined agent sequences or asks for clarification before routing.",
      "version": "1.0.0",
      "file": "subagents/episode-orchestrator.md",
      "path": "episode-orchestrator",
      "tools": [],
      "tags": []
    },
    {
      "name": "error-detective",
      "category": "quality-security",
      "description": "Search logs for error patterns and identify root causes. Use PROACTIVELY when debugging issues, analyzing logs, or investigating production errors.",
      "version": "1.0.0",
      "file": "subagents/error-detective.md",
      "path": "error-detective",
      "tools": [],
      "tags": []
    },
    {
      "name": "frontend-developer",
      "category": "development-architecture",
      "description": "Build Next.js applications with React components, shadcn/ui, and Tailwind CSS. Expert in SSR/SSG, app router, and modern frontend patterns. Use PROACTIVELY for Next.js development, UI component creation, or frontend architecture.",
      "version": "1.0.0",
      "file": "subagents/frontend-developer.md",
      "path": "frontend-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "game-developer",
      "category": "specialized-domains",
      "description": "Build games with Unity, Unreal Engine, or web technologies. Implements game mechanics, physics, AI, and optimization. Use PROACTIVELY for game development, engine integration, or gameplay programming.",
      "version": "1.0.0",
      "file": "subagents/game-developer.md",
      "path": "game-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "golang-expert",
      "category": "language-specialists",
      "description": "Write idiomatic Go code with goroutines, channels, and interfaces. Optimizes concurrency, implements Go patterns, and ensures proper error handling. Use PROACTIVELY for Go refactoring, concurrency issues, or performance optimization.",
      "version": "1.0.0",
      "file": "subagents/golang-expert.md",
      "path": "golang-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "graphql-architect",
      "category": "development-architecture",
      "description": "Design GraphQL schemas, resolvers, and federation. Optimizes queries, solves N+1 problems, and implements subscriptions. Use PROACTIVELY for GraphQL API design or performance issues.",
      "version": "1.0.0",
      "file": "subagents/graphql-architect.md",
      "path": "graphql-architect",
      "tools": [],
      "tags": []
    },
    {
      "name": "hackathon-ai-strategist",
      "category": "data-ai",
      "description": "Expert guidance on hackathon strategy, AI solution ideation, and project evaluation. Provides judge-perspective feedback, brainstorms winning AI concepts, and assesses project feasibility for tight timeframes.",
      "version": "1.0.0",
      "file": "subagents/hackathon-ai-strategist.md",
      "path": "hackathon-ai-strategist",
      "tools": [],
      "tags": []
    },
    {
      "name": "hyperledger-fabric-developer",
      "category": "blockchain-web3",
      "description": "Develop enterprise blockchain solutions with Hyperledger Fabric v2.5 LTS and v3.x. Expertise in chaincode development, network architecture, BFT consensus, and permissioned blockchain design. Use PROACTIVELY for enterprise blockchain, supply chain solutions, or private network implementations.",
      "version": "1.0.0",
      "file": "subagents/hyperledger-fabric-developer.md",
      "path": "hyperledger-fabric-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "incident-responder",
      "category": "quality-security",
      "description": "Handles production incidents with urgency and precision. Use IMMEDIATELY when production issues occur. Coordinates debugging, implements fixes, and documents post-mortems.",
      "version": "1.0.0",
      "file": "subagents/incident-responder.md",
      "path": "incident-responder",
      "tools": [],
      "tags": []
    },
    {
      "name": "ios-developer",
      "category": "development-architecture",
      "description": "Develop native iOS applications with Swift/SwiftUI. Masters UIKit/SwiftUI, Core Data, networking, and app lifecycle. Use PROACTIVELY for iOS-specific features, App Store optimization, or native iOS development.",
      "version": "1.0.0",
      "file": "subagents/ios-developer.md",
      "path": "ios-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "java-developer",
      "category": "language-specialists",
      "description": "Master modern Java with streams, concurrency, and JVM optimization. Handles Spring Boot, reactive programming, and enterprise patterns. Use PROACTIVELY for Java performance tuning, concurrent programming, or complex enterprise solutions.",
      "version": "1.0.0",
      "file": "subagents/java-developer.md",
      "path": "java-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "javascript-developer",
      "category": "language-specialists",
      "description": "JavaScript expert for modern ES6+, async patterns, and Node.js. Use PROACTIVELY for React, TypeScript, performance optimization, or complex async flows.",
      "version": "1.0.0",
      "file": "subagents/javascript-developer.md",
      "path": "javascript-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "laravel-vue-developer",
      "category": "development-architecture",
      "description": "Build full-stack Laravel applications with Vue3 frontend. Expert in Laravel APIs, Vue3 composition API, Pinia state management, and modern full-stack patterns. Use PROACTIVELY for Laravel backend development, Vue3 frontend components, API integration, or full-stack architecture.",
      "version": "1.0.0",
      "file": "subagents/laravel-vue-developer.md",
      "path": "laravel-vue-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "legacy-modernizer",
      "category": "specialized-domains",
      "description": "Refactor legacy codebases, migrate outdated frameworks, and implement gradual modernization. Handles technical debt, dependency updates, and backward compatibility. Use PROACTIVELY for legacy system updates, framework migrations, or technical debt reduction.",
      "version": "1.0.0",
      "file": "subagents/legacy-modernizer.md",
      "path": "legacy-modernizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "legal-advisor",
      "category": "business-finance",
      "description": "Draft privacy policies, terms of service, disclaimers, and legal notices. Creates GDPR-compliant texts, cookie policies, and data processing agreements. Use PROACTIVELY for legal documentation, compliance texts, or regulatory requirements.",
      "version": "1.0.0",
      "file": "subagents/legal-advisor.md",
      "path": "legal-advisor",
      "tools": [],
      "tags": []
    },
    {
      "name": "llms-maintainer",
      "category": "data-ai",
      "description": "Generates and maintains llms.txt roadmap files for AI crawler navigation. Updates when build processes complete, content changes, or site structure modifications occur.",
      "version": "1.0.0",
      "file": "subagents/llms-maintainer.md",
      "path": "llms-maintainer",
      "tools": [],
      "tags": []
    },
    {
      "name": "markdown-syntax-formatter",
      "category": "specialized-domains",
      "description": "Converts text with visual formatting into proper markdown syntax, fixes markdown formatting issues, and ensures consistent document structure. Handles lists, headings, code blocks, and emphasis markers.",
      "version": "1.0.0",
      "file": "subagents/markdown-syntax-formatter.md",
      "path": "markdown-syntax-formatter",
      "tools": [],
      "tags": []
    },
    {
      "name": "market-research-analyst",
      "category": "specialized-domains",
      "description": "Conducts comprehensive market research and competitive analysis for business strategy and investment decisions. Analyzes industry trends, identifies key players, gathers pricing intelligence, and evaluates market opportunities with collaborative research workflows.",
      "version": "1.0.0",
      "file": "subagents/market-research-analyst.md",
      "path": "market-research-analyst",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-deployment-orchestrator",
      "category": "specialized-domains",
      "description": "Deploys MCP servers to production with containerization, Kubernetes deployments, autoscaling, monitoring, and high-availability operations. Handles Docker images, Helm charts, service mesh setup, security hardening, and performance optimization.",
      "version": "1.0.0",
      "file": "subagents/mcp-deployment-orchestrator.md",
      "path": "mcp-deployment-orchestrator",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-expert",
      "category": "specialized-domains",
      "description": "Create Model Context Protocol integrations and server configurations. Use PROACTIVELY when building MCP servers, configuring integrations, or designing protocol implementations.",
      "version": "1.0.0",
      "file": "subagents/mcp-expert.md",
      "path": "mcp-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-registry-navigator",
      "category": "specialized-domains",
      "description": "You are an MCP Registry Navigator specializing in discovering, evaluating, and integrating MCP servers from various registries. Use when searching for servers with specific capabilities, assessing trustworthiness, generating configurations, or publishing to registries.",
      "version": "1.0.0",
      "file": "subagents/mcp-registry-navigator.md",
      "path": "mcp-registry-navigator",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-security-auditor",
      "category": "quality-security",
      "description": "You are an MCP Security Auditor specializing in reviewing MCP server implementations for vulnerabilities, designing authentication systems, and ensuring compliance. Use when implementing OAuth 2.1, designing RBAC, conducting security reviews, or auditing MCP servers.",
      "version": "1.0.0",
      "file": "subagents/mcp-security-auditor.md",
      "path": "mcp-security-auditor",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-server-architect",
      "category": "quality-security",
      "description": "Designs and implements MCP servers with transport layers, tool/resource/prompt definitions, completion support, session management, and protocol compliance. Creates servers from scratch or enhances existing ones following MCP specification best practices.",
      "version": "1.0.0",
      "file": "subagents/mcp-server-architect.md",
      "path": "mcp-server-architect",
      "tools": [],
      "tags": []
    },
    {
      "name": "mcp-testing-engineer",
      "category": "quality-security",
      "description": "Tests, debugs, and ensures quality for MCP servers including JSON schema validation, protocol compliance, security vulnerability assessment, load testing, and comprehensive debugging. Provides automated testing strategies and detailed quality reports.",
      "version": "1.0.0",
      "file": "subagents/mcp-testing-engineer.md",
      "path": "mcp-testing-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "metadata-agent",
      "category": "specialized-domains",
      "description": "Handles frontmatter standardization and metadata addition across vault files. Ensures consistent metadata structure, generates tags, and maintains creation/modification dates.",
      "version": "1.0.0",
      "file": "subagents/metadata-agent.md",
      "path": "metadata-agent",
      "tools": [],
      "tags": []
    },
    {
      "name": "ml-engineer",
      "category": "data-ai",
      "description": "Implement ML pipelines, model serving, and feature engineering. Handles TensorFlow/PyTorch deployment, A/B testing, and monitoring. Use PROACTIVELY for ML model integration or production deployment.",
      "version": "1.0.0",
      "file": "subagents/ml-engineer.md",
      "path": "ml-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "mlops-engineer",
      "category": "data-ai",
      "description": "Build ML pipelines, experiment tracking, and model registries. Implements MLflow, Kubeflow, and automated retraining. Handles data versioning and reproducibility. Use PROACTIVELY for ML infrastructure, experiment management, or pipeline automation.",
      "version": "1.0.0",
      "file": "subagents/mlops-engineer.md",
      "path": "mlops-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "mobile-developer",
      "category": "development-architecture",
      "description": "Develop React Native or Flutter apps with native integrations. Handles offline sync, push notifications, and app store deployments. Use PROACTIVELY for mobile features, cross-platform code, or app optimization.",
      "version": "1.0.0",
      "file": "subagents/mobile-developer.md",
      "path": "mobile-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "moc-agent",
      "category": "specialized-domains",
      "description": "Identifies and generates missing Maps of Content (MOCs) and organizes orphaned assets. Creates navigation hubs for vault content and maintains MOC networks with proper linking structure.",
      "version": "1.0.0",
      "file": "subagents/moc-agent.md",
      "path": "moc-agent",
      "tools": [],
      "tags": []
    },
    {
      "name": "network-engineer",
      "category": "infrastructure-operations",
      "description": "Debug network connectivity, configure load balancers, and analyze traffic patterns. Handles DNS, SSL/TLS, CDN setup, and network security. Use PROACTIVELY for connectivity issues, network optimization, or protocol debugging.",
      "version": "1.0.0",
      "file": "subagents/network-engineer.md",
      "path": "network-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "nextjs-app-router-developer",
      "category": "development-architecture",
      "description": "Build modern Next.js applications using App Router with Server Components, Server Actions, PPR, and advanced caching strategies. Expert in Next.js 14+ features including streaming, suspense boundaries, and parallel routes. Use PROACTIVELY for Next.js App Router development, performance optimization, or migrating from Pages Router.",
      "version": "1.0.0",
      "file": "subagents/nextjs-app-router-developer.md",
      "path": "nextjs-app-router-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "ocr-grammar-fixer",
      "category": "specialized-domains",
      "description": "You are an OCR Grammar Fixer specializing in cleaning up text processed through OCR that contains recognition errors, spacing issues, or grammatical problems. Use when correcting OCR-processed marketing copy, business documents, or scanned text with typical recognition artifacts.",
      "version": "1.0.0",
      "file": "subagents/ocr-grammar-fixer.md",
      "path": "ocr-grammar-fixer",
      "tools": [],
      "tags": []
    },
    {
      "name": "ocr-quality-assurance",
      "category": "specialized-domains",
      "description": "You are an OCR Quality Assurance specialist performing final review and validation of OCR-corrected text against original image sources. Use as the final step in OCR pipelines after visual analysis, text comparison, grammar fixes, and markdown formatting.",
      "version": "1.0.0",
      "file": "subagents/ocr-quality-assurance.md",
      "path": "ocr-quality-assurance",
      "tools": [],
      "tags": []
    },
    {
      "name": "payment-integration",
      "category": "business-finance",
      "description": "Integrate Stripe, PayPal, and payment processors. Handles checkout flows, subscriptions, webhooks, and PCI compliance. Use PROACTIVELY when implementing payments, billing, or subscription features.",
      "version": "1.0.0",
      "file": "subagents/payment-integration.md",
      "path": "payment-integration",
      "tools": [],
      "tags": []
    },
    {
      "name": "performance-engineer",
      "category": "quality-security",
      "description": "Profile applications, optimize bottlenecks, and implement caching strategies. Handles load testing, CDN setup, and query optimization. Use PROACTIVELY for performance issues or optimization tasks.",
      "version": "1.0.0",
      "file": "subagents/performance-engineer.md",
      "path": "performance-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "php-developer",
      "category": "language-specialists",
      "description": "Write idiomatic PHP code with design patterns, SOLID principles, and modern best practices. Implements PSR standards, dependency injection, and comprehensive testing. Use PROACTIVELY for PHP architecture, refactoring, or implementing design patterns.",
      "version": "1.0.0",
      "file": "subagents/php-developer.md",
      "path": "php-developer",
      "tools": [],
      "tags": []
    },
    {
      "name": "podcast-content-analyzer",
      "category": "specialized-domains",
      "description": "Analyze podcast transcripts to identify engaging segments and viral moments. Use PROACTIVELY for content optimization, chapter creation, or social media clip selection.",
      "version": "1.0.0",
      "file": "subagents/podcast-content-analyzer.md",
      "path": "podcast-content-analyzer",
      "tools": [],
      "tags": []
    },
    {
      "name": "podcast-metadata-specialist",
      "category": "specialized-domains",
      "description": "You are a Podcast Metadata Specialist generating comprehensive metadata, show notes, chapter markers, and platform-specific descriptions for podcast episodes. Use when creating SEO-optimized titles, timestamps, social media posts, and formatted descriptions for podcast platforms.",
      "version": "1.0.0",
      "file": "subagents/podcast-metadata-specialist.md",
      "path": "podcast-metadata-specialist",
      "tools": [],
      "tags": []
    },
    {
      "name": "podcast-transcriber",
      "category": "specialized-domains",
      "description": "You are a Podcast Transcriber specializing in extracting accurate transcripts from audio/video files with timestamp precision. Use when converting media files for transcription, generating timestamped segments, identifying speakers, and producing structured transcript data.",
      "version": "1.0.0",
      "file": "subagents/podcast-transcriber.md",
      "path": "podcast-transcriber",
      "tools": [],
      "tags": []
    },
    {
      "name": "podcast-trend-scout",
      "category": "specialized-domains",
      "description": "You are a Podcast Trend Scout identifying emerging tech topics and news for podcast episodes. Use when planning content for tech podcasts, researching current trends, finding breaking developments, or suggesting timely topics aligned with tech focus areas.",
      "version": "1.0.0",
      "file": "subagents/podcast-trend-scout.md",
      "path": "podcast-trend-scout",
      "tools": [],
      "tags": []
    },
    {
      "name": "project-supervisor-orchestrator",
      "category": "specialized-domains",
      "description": "You are a Project Supervisor Orchestrator managing complex multi-step workflows that coordinate multiple specialized agents in sequence. Use when orchestrating agent pipelines, detecting incomplete information, or managing sophisticated multi-agent processes.",
      "version": "1.0.0",
      "file": "subagents/project-supervisor-orchestrator.md",
      "path": "project-supervisor-orchestrator",
      "tools": [],
      "tags": []
    },
    {
      "name": "prompt-engineer",
      "category": "data-ai",
      "description": "Optimizes prompts for LLMs and AI systems. Use when building AI features, improving agent performance, or crafting system prompts. Expert in prompt patterns and techniques.",
      "version": "1.0.0",
      "file": "subagents/prompt-engineer.md",
      "path": "prompt-engineer",
      "tools": [],
      "tags": []
    },
    {
      "name": "python-expert",
      "category": "language-specialists",
      "description": "Write idiomatic Python code with advanced features like decorators, generators, and async/await. Optimizes performance, implements design patterns, and ensures comprehensive testing. Use PROACTIVELY for Python refactoring, optimization, or complex Python features.",
      "version": "1.0.0",
      "file": "subagents/python-expert.md",
      "path": "python-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "quant-analyst",
      "category": "business-finance",
      "description": "Build financial models, backtest trading strategies, and analyze market data. Implements risk metrics, portfolio optimization, and statistical arbitrage. Use PROACTIVELY for quantitative finance, trading algorithms, or risk analysis.",
      "version": "1.0.0",
      "file": "subagents/quant-analyst.md",
      "path": "quant-analyst",
      "tools": [],
      "tags": []
    },
    {
      "name": "query-clarifier",
      "category": "specialized-domains",
      "description": "Analyze research queries for clarity and determine if clarification is needed. Use PROACTIVELY at the beginning of research workflows to ensure queries are specific and actionable.",
      "version": "1.0.0",
      "file": "subagents/query-clarifier.md",
      "path": "query-clarifier",
      "tools": [],
      "tags": []
    },
    {
      "name": "rails-expert",
      "category": "language-specialists",
      "description": "Build scalable Rails applications with modern patterns and best practices. Implements service objects, background jobs, and API design. Use PROACTIVELY for Rails development, performance optimization, or architectural decisions.",
      "version": "1.0.0",
      "file": "subagents/rails-expert.md",
      "path": "rails-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "react-performance-optimization",
      "category": "development-architecture",
      "description": "You are a React Performance Optimization specialist focusing on identifying, analyzing, and resolving performance bottlenecks in React applications. Your expertise covers rendering optimization, bundle analysis, memory management, and Core Web Vitals improvements.",
      "version": "1.0.0",
      "file": "subagents/react-performance-optimization.md",
      "path": "react-performance-optimization",
      "tools": [],
      "tags": []
    },
    {
      "name": "report-generator",
      "category": "specialized-domains",
      "description": "You are the Report Generator, a specialized expert in transforming synthesized research findings into comprehensive, well-structured final reports. Your expertise lies in creating clear narratives from complex data while maintaining academic rigor and proper citation standards.",
      "version": "1.0.0",
      "file": "subagents/report-generator.md",
      "path": "report-generator",
      "tools": [],
      "tags": []
    },
    {
      "name": "research-brief-generator",
      "category": "specialized-domains",
      "description": "Transforms user research queries into structured, actionable research briefs with specific questions, keywords, source preferences, and success criteria. Creates comprehensive research plans that guide subsequent research activities.",
      "version": "1.0.0",
      "file": "subagents/research-brief-generator.md",
      "path": "research-brief-generator",
      "tools": [],
      "tags": []
    },
    {
      "name": "research-coordinator",
      "category": "specialized-domains",
      "description": "Strategically plan and coordinate complex research tasks across multiple specialists. Use PROACTIVELY for multi-faceted research projects requiring diverse expertise.",
      "version": "1.0.0",
      "file": "subagents/research-coordinator.md",
      "path": "research-coordinator",
      "tools": [],
      "tags": []
    },
    {
      "name": "research-orchestrator",
      "category": "specialized-domains",
      "description": "You are the Research Orchestrator, an elite coordinator responsible for managing comprehensive research projects using the Open Deep Research methodology. You excel at breaking down complex research queries into manageable phases and coordinating specialized agents to deliver thorough, high-quality research outputs.",
      "version": "1.0.0",
      "file": "subagents/research-orchestrator.md",
      "path": "research-orchestrator",
      "tools": [],
      "tags": []
    },
    {
      "name": "research-synthesizer",
      "category": "specialized-domains",
      "description": "Consolidate and synthesize findings from multiple research sources into unified analysis. Use when merging diverse perspectives, identifying patterns, and creating structured insights from complex research.",
      "version": "1.0.0",
      "file": "subagents/research-synthesizer.md",
      "path": "research-synthesizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "review-agent",
      "category": "quality-security",
      "description": "You are a specialized quality assurance agent for knowledge management systems. Your primary responsibility is to review and validate work performed by other enhancement agents, ensuring consistency and quality across the vault through systematic validation and cross-checking.",
      "version": "1.0.0",
      "file": "subagents/review-agent.md",
      "path": "review-agent",
      "tools": [],
      "tags": []
    },
    {
      "name": "risk-manager",
      "category": "sales-marketing",
      "description": "You are a risk manager specializing in portfolio protection and risk measurement. Monitor portfolio risk, R-multiples, and position limits. Creates hedging strategies, calculates expectancy, and implements stop-losses for comprehensive risk assessment and trade tracking.",
      "version": "1.0.0",
      "file": "subagents/risk-manager.md",
      "path": "risk-manager",
      "tools": [],
      "tags": []
    },
    {
      "name": "ruby-expert",
      "category": "language-specialists",
      "description": "Write idiomatic Ruby code following best practices and design patterns. Implements SOLID principles, service objects, and comprehensive testing. Use PROACTIVELY for Ruby refactoring, performance optimization, or complex Ruby features.",
      "version": "1.0.0",
      "file": "subagents/ruby-expert.md",
      "path": "ruby-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "rust-expert",
      "category": "language-specialists",
      "description": "Write idiomatic Rust code with ownership, lifetimes, and type safety. Implements concurrent systems, async programming, and memory-safe abstractions. Use PROACTIVELY for Rust development, systems programming, or performance-critical code.",
      "version": "1.0.0",
      "file": "subagents/rust-expert.md",
      "path": "rust-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "sales-automator",
      "category": "sales-marketing",
      "description": "Draft cold emails, follow-ups, and proposal templates. Creates pricing pages, case studies, and sales scripts. Use PROACTIVELY for sales outreach or lead nurturing.",
      "version": "1.0.0",
      "file": "subagents/sales-automator.md",
      "path": "sales-automator",
      "tools": [],
      "tags": []
    },
    {
      "name": "search-specialist",
      "category": "data-ai",
      "description": "You are a search specialist expert at finding and synthesizing information from the web. Masters advanced search techniques, result filtering, multi-source verification, competitive analysis, and fact-checking using sophisticated query optimization strategies.",
      "version": "1.0.0",
      "file": "subagents/search-specialist.md",
      "path": "search-specialist",
      "tools": [],
      "tags": []
    },
    {
      "name": "security-auditor",
      "category": "quality-security",
      "description": "Review code for vulnerabilities, implement secure authentication, and ensure OWASP compliance. Handles JWT, OAuth2, CORS, CSP, and encryption. Use PROACTIVELY for security reviews, auth flows, or vulnerability fixes.",
      "version": "1.0.0",
      "file": "subagents/security-auditor.md",
      "path": "security-auditor",
      "tools": [],
      "tags": []
    },
    {
      "name": "seo-podcast-optimizer",
      "category": "specialized-domains",
      "description": "You are an SEO consultant specializing in tech podcasts. Your expertise lies in crafting search-optimized content that balances keyword effectiveness with engaging, click-worthy copy that accurately represents podcast content for maximum search visibility.",
      "version": "1.0.0",
      "file": "subagents/seo-podcast-optimizer.md",
      "path": "seo-podcast-optimizer",
      "tools": [],
      "tags": []
    },
    {
      "name": "social-media-clip-creator",
      "category": "sales-marketing",
      "description": "Creates optimized video clips for social media platforms from longer content. Handles platform-specific aspect ratios, durations, encoding settings for TikTok, Instagram, YouTube Shorts, Twitter, and LinkedIn using FFMPEG processing and optimization.",
      "version": "1.0.0",
      "file": "subagents/social-media-clip-creator.md",
      "path": "social-media-clip-creator",
      "tools": [],
      "tags": []
    },
    {
      "name": "social-media-copywriter",
      "category": "sales-marketing",
      "description": "You are an expert social media copywriter specializing in podcast promotion. Your role is to transform episode information into compelling social media content that drives engagement and listenership across Twitter/X, LinkedIn, and Instagram platforms.",
      "version": "1.0.0",
      "file": "subagents/social-media-copywriter.md",
      "path": "social-media-copywriter",
      "tools": [],
      "tags": []
    },
    {
      "name": "sql-expert",
      "category": "language-specialists",
      "description": "Write complex SQL queries and optimize database performance. Use PROACTIVELY for query optimization, schema design, or complex data transformations.",
      "version": "1.0.0",
      "file": "subagents/sql-expert.md",
      "path": "sql-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "tag-agent",
      "category": "specialized-domains",
      "description": "Normalizes and hierarchically organizes tag taxonomy for knowledge management systems. Maintains clean, consistent tag structures and consolidates duplicates.",
      "version": "1.0.0",
      "file": "subagents/tag-agent.md",
      "path": "tag-agent",
      "tools": [],
      "tags": []
    },
    {
      "name": "task-decomposition-expert",
      "category": "data-ai",
      "description": "Break down complex user goals into actionable tasks and identify optimal combinations of tools, agents, and workflows for system integration.",
      "version": "1.0.0",
      "file": "subagents/task-decomposition-expert.md",
      "path": "task-decomposition-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "technical-researcher",
      "category": "specialized-domains",
      "description": "Analyze code repositories, technical documentation, and implementation details. Use PROACTIVELY for evaluating technical solutions, reviewing APIs, or assessing code quality.",
      "version": "1.0.0",
      "file": "subagents/technical-researcher.md",
      "path": "technical-researcher",
      "tools": [],
      "tags": []
    },
    {
      "name": "terraform-specialist",
      "category": "infrastructure-operations",
      "description": "Write Terraform modules and manage infrastructure as code. Use PROACTIVELY for infrastructure automation, state management, or multi-environment deployments.",
      "version": "1.0.0",
      "file": "subagents/terraform-specialist.md",
      "path": "terraform-specialist",
      "tools": [],
      "tags": []
    },
    {
      "name": "test-automator",
      "category": "quality-security",
      "description": "Create comprehensive test suites with unit, integration, and e2e tests. Sets up CI pipelines, mocking strategies, and test data. Use PROACTIVELY for test coverage improvement or test automation setup.",
      "version": "1.0.0",
      "file": "subagents/test-automator.md",
      "path": "test-automator",
      "tools": [],
      "tags": []
    },
    {
      "name": "text-comparison-validator",
      "category": "specialized-domains",
      "description": "Compare extracted text from images with existing markdown files to ensure accuracy and consistency. Detects discrepancies, errors, and formatting inconsistencies.",
      "version": "1.0.0",
      "file": "subagents/text-comparison-validator.md",
      "path": "text-comparison-validator",
      "tools": [],
      "tags": []
    },
    {
      "name": "timestamp-precision-specialist",
      "category": "specialized-domains",
      "description": "Extract frame-accurate timestamps from audio/video files for podcast editing. Identifies precise cut points, detects speech boundaries, and ensures clean transitions.",
      "version": "1.0.0",
      "file": "subagents/timestamp-precision-specialist.md",
      "path": "timestamp-precision-specialist",
      "tools": [],
      "tags": []
    },
    {
      "name": "twitter-ai-influencer-manager",
      "category": "specialized-domains",
      "description": "Interact with Twitter around AI thought leaders and influencers. Post tweets, search content, analyze influencer tweets, schedule posts, and engage with AI community.",
      "version": "1.0.0",
      "file": "subagents/twitter-ai-influencer-manager.md",
      "path": "twitter-ai-influencer-manager",
      "tools": [],
      "tags": []
    },
    {
      "name": "typescript-expert",
      "category": "language-specialists",
      "description": "Write type-safe TypeScript with advanced type system features, generics, and utility types. Implements complex type inference, discriminated unions, and conditional types. Use PROACTIVELY for TypeScript development, type system design, or migrating JavaScript to TypeScript.",
      "version": "1.0.0",
      "file": "subagents/typescript-expert.md",
      "path": "typescript-expert",
      "tools": [],
      "tags": []
    },
    {
      "name": "ui-ux-designer",
      "category": "design-experience",
      "description": "Design user interfaces and experiences with modern design principles, accessibility standards, and design systems. Expert in user research, wireframing, prototyping, and design implementation. Use PROACTIVELY for UI/UX design, design systems, or user experience optimization.",
      "version": "1.0.0",
      "file": "subagents/ui-ux-designer.md",
      "path": "ui-ux-designer",
      "tools": [],
      "tags": []
    },
    {
      "name": "url-context-validator",
      "category": "specialized-domains",
      "description": "Validate URLs for both technical functionality and contextual appropriateness. Goes beyond link checking to analyze content relevance and alignment.",
      "version": "1.0.0",
      "file": "subagents/url-context-validator.md",
      "path": "url-context-validator",
      "tools": [],
      "tags": []
    },
    {
      "name": "url-link-extractor",
      "category": "specialized-domains",
      "description": "Find, extract, and catalog all URLs and links within website codebases. Includes internal links, external links, API endpoints, and asset references.",
      "version": "1.0.0",
      "file": "subagents/url-link-extractor.md",
      "path": "url-link-extractor",
      "tools": [],
      "tags": []
    },
    {
      "name": "visual-analysis-ocr",
      "category": "specialized-domains",
      "description": "Extract and analyze text content from PNG images while preserving original formatting and structure. Converts visual hierarchy into markdown format.",
      "version": "1.0.0",
      "file": "subagents/visual-analysis-ocr.md",
      "path": "visual-analysis-ocr",
      "tools": [],
      "tags": []
    },
    {
      "name": "wordpress-developer",
      "category": "development-architecture",
      "description": "Build professional WordPress solutions with custom themes, plugins, and advanced functionality. Expert in WordPress architecture, custom post types, block development, performance optimization, and security. Use PROACTIVELY for WordPress development, custom plugin creation, or WP architecture.",
      "version": "1.0.0",
      "file": "subagents/wordpress-developer.md",
      "path": "wordpress-developer",
      "tools": [],
      "tags": []
    }
  ],
  "commands": [
    {
      "name": "add-to-changelog",
      "category": "documentation-changelogs",
      "description": "Add a new entry to the project's CHANGELOG.md file following Keep a Changelog format",
      "version": "1.0.0",
      "file": "commands/add-to-changelog.md",
      "path": "add-to-changelog",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "bug-fix",
      "category": "version-control-git",
      "description": "Systematic workflow for fixing bugs including issue creation, branch management, and PR submission",
      "version": "1.0.0",
      "file": "commands/bug-fix.md",
      "path": "bug-fix",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "check",
      "category": "code-analysis-testing",
      "description": "Run project checks and fix any errors without committing",
      "version": "1.0.0",
      "file": "commands/check.md",
      "path": "check",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "clean",
      "category": "code-analysis-testing",
      "description": "Fix all linting and formatting issues across the codebase",
      "version": "1.0.0",
      "file": "commands/clean.md",
      "path": "clean",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "code_analysis",
      "category": "code-analysis-testing",
      "description": "Perform comprehensive code analysis with quality metrics and recommendations",
      "version": "1.0.0",
      "file": "commands/code_analysis.md",
      "path": "code_analysis",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "commit",
      "category": "version-control-git",
      "description": "Create well-formatted git commits with conventional commit messages and emoji",
      "version": "1.0.0",
      "file": "commands/commit.md",
      "path": "commit",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "commit-fast",
      "category": "version-control-git",
      "description": "Automatically create and execute a git commit using the first suggested commit message",
      "version": "1.0.0",
      "file": "commands/commit-fast.md",
      "path": "commit-fast",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "context-prime",
      "category": "context-loading-priming",
      "description": "Load project context by reading README.md and exploring relevant project files",
      "version": "1.0.0",
      "file": "commands/context-prime.md",
      "path": "context-prime",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-command",
      "category": "project-task-management",
      "description": "Create a new command following existing patterns and organizational structure",
      "version": "1.0.0",
      "file": "commands/create-command.md",
      "path": "create-command",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-docs",
      "category": "documentation-changelogs",
      "description": "Analyze GitHub issue and create technical specification with implementation plan",
      "version": "1.0.0",
      "file": "commands/create-docs.md",
      "path": "create-docs",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-jtbd",
      "category": "project-task-management",
      "description": "Create a Jobs to be Done (JTBD) document for a product feature focusing on user needs",
      "version": "1.0.0",
      "file": "commands/create-jtbd.md",
      "path": "create-jtbd",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-pr",
      "category": "version-control-git",
      "description": "Create a new branch, commit changes, and submit a pull request with automatic commit splitting",
      "version": "1.0.0",
      "file": "commands/create-pr.md",
      "path": "create-pr",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-prd",
      "category": "project-task-management",
      "description": "Create a Product Requirements Document (PRD) for a product feature",
      "version": "1.0.0",
      "file": "commands/create-prd.md",
      "path": "create-prd",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-prp",
      "category": "project-task-management",
      "description": "Create a comprehensive Product Requirement Prompt (PRP) with research and context gathering",
      "version": "1.0.0",
      "file": "commands/create-prp.md",
      "path": "create-prp",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-pull-request",
      "category": "version-control-git",
      "description": "Guide for creating pull requests using GitHub CLI with proper templates and conventions",
      "version": "1.0.0",
      "file": "commands/create-pull-request.md",
      "path": "create-pull-request",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "create-worktrees",
      "category": "version-control-git",
      "description": "Manage git worktrees for open PRs and create new branch worktrees",
      "version": "1.0.0",
      "file": "commands/create-worktrees.md",
      "path": "create-worktrees",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "docs",
      "category": "documentation-changelogs",
      "description": "Update or generate YAML documentation for SQL models with proper descriptions and tests",
      "version": "1.0.0",
      "file": "commands/docs.md",
      "path": "docs",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "explain-issue-fix",
      "category": "documentation-changelogs",
      "description": "Explain how tasks in an issue were implemented with detailed breakdown",
      "version": "1.0.0",
      "file": "commands/explain-issue-fix.md",
      "path": "explain-issue-fix",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "five",
      "category": "miscellaneous",
      "description": "Apply the Five Whys root cause analysis technique to systematically investigate issues",
      "version": "1.0.0",
      "file": "commands/five.md",
      "path": "five",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "fix-github-issue",
      "category": "version-control-git",
      "description": "Analyze and fix a GitHub issue with comprehensive testing and verification",
      "version": "1.0.0",
      "file": "commands/fix-github-issue.md",
      "path": "fix-github-issue",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "fix-issue",
      "category": "version-control-git",
      "description": "Fix a specific issue or problem with the given identifier or description",
      "version": "1.0.0",
      "file": "commands/fix-issue.md",
      "path": "fix-issue",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "fix-pr",
      "category": "version-control-git",
      "description": "Fetch unresolved comments for current branch's PR and fix them",
      "version": "1.0.0",
      "file": "commands/fix-pr.md",
      "path": "fix-pr",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "husky",
      "category": "version-control-git",
      "description": "Verify repository is in working state by running CI checks and fixing issues",
      "version": "1.0.0",
      "file": "commands/husky.md",
      "path": "husky",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "initref",
      "category": "context-loading-priming",
      "description": "Build reference documentation by creating markdown files and updating CLAUDE.md",
      "version": "1.0.0",
      "file": "commands/initref.md",
      "path": "initref",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "mermaid",
      "category": "miscellaneous",
      "description": "Create entity relationship diagrams using Mermaid from SQL/database files",
      "version": "1.0.0",
      "file": "commands/mermaid.md",
      "path": "mermaid",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "optimize",
      "category": "code-analysis-testing",
      "description": "Analyze code performance and propose three specific optimization improvements",
      "version": "1.0.0",
      "file": "commands/optimize.md",
      "path": "optimize",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "pr-review",
      "category": "version-control-git",
      "description": "Conduct comprehensive PR review from multiple perspectives (PM, Developer, QA, Security)",
      "version": "1.0.0",
      "file": "commands/pr-review.md",
      "path": "pr-review",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "prime",
      "category": "context-loading-priming",
      "description": "Load project context by reading key documentation files and exploring project structure",
      "version": "1.0.0",
      "file": "commands/prime.md",
      "path": "prime",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "release",
      "category": "ci-deployment",
      "description": "Prepare a new release by updating changelog, version, and documentation",
      "version": "1.0.0",
      "file": "commands/release.md",
      "path": "release",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "repro-issue",
      "category": "code-analysis-testing",
      "description": "Reproduce a specific issue by creating a failing test case",
      "version": "1.0.0",
      "file": "commands/repro-issue.md",
      "path": "repro-issue",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "rsi",
      "category": "context-loading-priming",
      "description": "Read project commands and documentation to optimize AI-assisted development process",
      "version": "1.0.0",
      "file": "commands/rsi.md",
      "path": "rsi",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "run-ci",
      "category": "ci-deployment",
      "description": "Run CI checks and fix any errors until all tests pass",
      "version": "1.0.0",
      "file": "commands/run-ci.md",
      "path": "run-ci",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "tdd",
      "category": "code-analysis-testing",
      "description": "Test-driven development workflow with Red-Green-Refactor process and branch management",
      "version": "1.0.0",
      "file": "commands/tdd.md",
      "path": "tdd",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "todo",
      "category": "project-task-management",
      "description": "Manage project todos in a todos.md file with add, complete, remove, and list operations",
      "version": "1.0.0",
      "file": "commands/todo.md",
      "path": "todo",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "update-branch-name",
      "category": "version-control-git",
      "description": "Update current git branch name based on analysis of changes made",
      "version": "1.0.0",
      "file": "commands/update-branch-name.md",
      "path": "update-branch-name",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "update-docs",
      "category": "documentation-changelogs",
      "description": "Update implementation documentation including specs, status, and best practices",
      "version": "1.0.0",
      "file": "commands/update-docs.md",
      "path": "update-docs",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    },
    {
      "name": "use-stepper",
      "category": "miscellaneous",
      "description": "Use structured stepper approach for problem-solving and project development",
      "version": "1.0.0",
      "file": "commands/use-stepper.md",
      "path": "use-stepper",
      "argumentHint": "<args>",
      "model": "claude-3.5",
      "prefix": "/",
      "tags": []
    }
  ],
  "mcpServers": [
    {
      "name": "arxiv-mcp-server",
      "display_name": "Arxiv Mcp Server",
      "category": "ai-task-management",
      "description": "The ArXiv MCP Server provides a comprehensive bridge between AI assistants and arXiv's research repository through the Model Context Protocol (MCP).   Features: • Search arXiv papers with advanced filtering • Download and store papers locally as markdown • Read and analyze paper content • Deep research analysis prompts • Local paper management and storage  Perfect for researchers, academics, and AI assistants conducting literature reviews and research analysis.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/arxiv-mcp-server",
        "official": "https://hub.docker.com/r/mcp/arxiv-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/arxiv-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp arxiv-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable arxiv-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/arxiv-mcp-server.md",
      "path": "docker-mcp/arxiv-mcp-server"
    },
    {
      "name": "astra-db",
      "display_name": "Astra Db",
      "category": "database",
      "description": "An MCP server for Astra DB workloads.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/astra-db",
        "official": "https://hub.docker.com/r/mcp/astra-db"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/astra-db",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp astra-db",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable astra-db",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/astra-db.md",
      "path": "docker-mcp/astra-db"
    },
    {
      "name": "atlan",
      "display_name": "Atlan",
      "category": "web-search",
      "description": "MCP server for interacting with Atlan services including asset search, updates, and lineage traversal for comprehensive data governance and discovery.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/atlan",
        "official": "https://hub.docker.com/r/mcp/atlan"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/atlan",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp atlan",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable atlan",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/atlan.md",
      "path": "docker-mcp/atlan"
    },
    {
      "name": "atlas-docs",
      "display_name": "Atlas Docs",
      "category": "productivity",
      "description": "Provide LLMs hosted, clean markdown documentation of libraries and frameworks.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/atlas-docs",
        "official": "https://hub.docker.com/r/mcp/atlas-docs"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/atlas-docs",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp atlas-docs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable atlas-docs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/atlas-docs.md",
      "path": "docker-mcp/atlas-docs"
    },
    {
      "name": "atlassian",
      "display_name": "Atlassian",
      "category": "cloud-infrastructure",
      "description": "Tools for Atlassian products (Confluence and Jira). This integration supports both Atlassian Cloud and Jira Server/Data Center deployments.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/atlassian",
        "official": "https://hub.docker.com/r/mcp/atlassian"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/atlassian",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp atlassian",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable atlassian",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/atlassian.md",
      "path": "docker-mcp/atlassian"
    },
    {
      "name": "audiense-insights",
      "display_name": "Audiense Insights",
      "category": "ai-task-management",
      "description": "Audiense Insights MCP Server is a server based on the Model Context Protocol (MCP) that allows Claude and other MCP-compatible clients to interact with your Audiense Insights account.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/audiense-insights",
        "official": "https://hub.docker.com/r/mcp/audiense-insights"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/audiense-insights",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp audiense-insights",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable audiense-insights",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/audiense-insights.md",
      "path": "docker-mcp/audiense-insights"
    },
    {
      "name": "aws-cdk-mcp-server",
      "display_name": "Aws Cdk Mcp Server",
      "category": "cloud-infrastructure",
      "description": "AWS Cloud Development Kit (CDK) best practices, infrastructure as code patterns, and security compliance with CDK Nag.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-cdk-mcp-server",
        "official": "https://hub.docker.com/r/mcp/aws-cdk-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-cdk-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-cdk-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-cdk-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws",
        "security"
      ],
      "file": "docker-mcp/aws-cdk-mcp-server.md",
      "path": "docker-mcp/aws-cdk-mcp-server"
    },
    {
      "name": "aws-core-mcp-server",
      "display_name": "Aws Core Mcp Server",
      "category": "cloud-infrastructure",
      "description": "Starting point for using the awslabs MCP servers.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-core-mcp-server",
        "official": "https://hub.docker.com/r/mcp/aws-core-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-core-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-core-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-core-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws"
      ],
      "file": "docker-mcp/aws-core-mcp-server.md",
      "path": "docker-mcp/aws-core-mcp-server"
    },
    {
      "name": "aws-diagram",
      "display_name": "Aws Diagram",
      "category": "cloud-infrastructure",
      "description": "Seamlessly create diagrams using the Python diagrams package DSL. This server allows you to generate AWS diagrams, sequence diagrams, flow diagrams, and class diagrams using Python code.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-diagram",
        "official": "https://hub.docker.com/r/mcp/aws-diagram"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-diagram",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-diagram",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-diagram",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws",
        "ai"
      ],
      "file": "docker-mcp/aws-diagram.md",
      "path": "docker-mcp/aws-diagram"
    },
    {
      "name": "aws-documentation",
      "display_name": "Aws Documentation",
      "category": "cloud-infrastructure",
      "description": "Tools to access AWS documentation, search for content, and get recommendations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-documentation",
        "official": "https://hub.docker.com/r/mcp/aws-documentation"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-documentation",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-documentation",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-documentation",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws",
        "search"
      ],
      "file": "docker-mcp/aws-documentation.md",
      "path": "docker-mcp/aws-documentation"
    },
    {
      "name": "aws-kb-retrieval-server",
      "display_name": "Aws Kb Retrieval Server",
      "category": "cloud-infrastructure",
      "description": "An MCP server implementation for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-kb-retrieval-server",
        "official": "https://hub.docker.com/r/mcp/aws-kb-retrieval-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-kb-retrieval-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-kb-retrieval-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-kb-retrieval-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws"
      ],
      "file": "docker-mcp/aws-kb-retrieval-server.md",
      "path": "docker-mcp/aws-kb-retrieval-server"
    },
    {
      "name": "aws-terraform",
      "display_name": "Aws Terraform",
      "category": "cloud-infrastructure",
      "description": "Terraform on AWS best practices, infrastructure as code patterns, and security compliance with Checkov.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/aws-terraform",
        "official": "https://hub.docker.com/r/mcp/aws-terraform"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/aws-terraform",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp aws-terraform",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable aws-terraform",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "aws",
        "security"
      ],
      "file": "docker-mcp/aws-terraform.md",
      "path": "docker-mcp/aws-terraform"
    },
    {
      "name": "beagle-security",
      "display_name": "Beagle Security",
      "category": "api-development",
      "description": "Connects with the Beagle Security backend using a user token to manage applications, run automated security tests, track vulnerabilities across environments, and gain intelligence from Application and API vulnerability data.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/beagle-security",
        "official": "https://hub.docker.com/r/mcp/beagle-security"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/beagle-security",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp beagle-security",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable beagle-security",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai",
        "security"
      ],
      "file": "docker-mcp/beagle-security.md",
      "path": "docker-mcp/beagle-security"
    },
    {
      "name": "bitrefill",
      "display_name": "Bitrefill",
      "category": "ai-task-management",
      "description": "A Model Context Protocol Server connector for Bitrefill public API, to enable AI agents to search and shop on Bitrefill.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/bitrefill",
        "official": "https://hub.docker.com/r/mcp/bitrefill"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/bitrefill",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp bitrefill",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable bitrefill",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai",
        "search"
      ],
      "file": "docker-mcp/bitrefill.md",
      "path": "docker-mcp/bitrefill"
    },
    {
      "name": "box",
      "display_name": "Box",
      "category": "api-development",
      "description": "An MCP server capable of interacting with the Box API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/box",
        "official": "https://hub.docker.com/r/mcp/box"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/box",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp box",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable box",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/box.md",
      "path": "docker-mcp/box"
    },
    {
      "name": "brave",
      "display_name": "Brave",
      "category": "api-development",
      "description": "Search the Web for pages, images, news, videos, and more using the Brave Search API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/brave",
        "official": "https://hub.docker.com/r/mcp/brave"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/brave",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp brave",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable brave",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "search"
      ],
      "file": "docker-mcp/brave.md",
      "path": "docker-mcp/brave"
    },
    {
      "name": "buildkite",
      "display_name": "Buildkite",
      "category": "developer-tools",
      "description": "Buildkite MCP lets agents interact with Buildkite Builds, Jobs, Logs, Packages and Test Suites.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/buildkite",
        "official": "https://hub.docker.com/r/mcp/buildkite"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/buildkite",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp buildkite",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable buildkite",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/buildkite.md",
      "path": "docker-mcp/buildkite"
    },
    {
      "name": "cdata-connectcloud",
      "display_name": "Cdata Connectcloud",
      "category": "ai-task-management",
      "description": "This fully functional MCP Server allows you to connect to any data source in Connect Cloud from Claude Desktop.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/cdata-connectcloud",
        "official": "https://hub.docker.com/r/mcp/cdata-connectcloud"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/cdata-connectcloud",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp cdata-connectcloud",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable cdata-connectcloud",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/cdata-connectcloud.md",
      "path": "docker-mcp/cdata-connectcloud"
    },
    {
      "name": "chroma",
      "display_name": "Chroma",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server implementation that provides database capabilities for Chroma.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/chroma",
        "official": "https://hub.docker.com/r/mcp/chroma"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/chroma",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp chroma",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable chroma",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/chroma.md",
      "path": "docker-mcp/chroma"
    },
    {
      "name": "circleci",
      "display_name": "Circleci",
      "category": "ai-task-management",
      "description": "A specialized server implementation for the Model Context Protocol (MCP) designed to integrate with CircleCI's development workflow. This project serves as a bridge between CircleCI's infrastructure and the Model Context Protocol, enabling enhanced AI-powered development experiences.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/circleci",
        "official": "https://hub.docker.com/r/mcp/circleci"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/circleci",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp circleci",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable circleci",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/circleci.md",
      "path": "docker-mcp/circleci"
    },
    {
      "name": "clickhouse",
      "display_name": "Clickhouse",
      "category": "database",
      "description": "Official ClickHouse MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/clickhouse",
        "official": "https://hub.docker.com/r/mcp/clickhouse"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/clickhouse",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp clickhouse",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable clickhouse",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/clickhouse.md",
      "path": "docker-mcp/clickhouse"
    },
    {
      "name": "cockroachdb",
      "display_name": "Cockroachdb",
      "category": "ai-task-management",
      "description": "Enable AI agents to manage, monitor, and query CockroachDB using natural language. Perform complex database operations, cluster management, and query execution seamlessly through AI-driven workflows. Integrate effortlessly with MCP clients for scalable and high-performance data operations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/cockroachdb",
        "official": "https://hub.docker.com/r/mcp/cockroachdb"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/cockroachdb",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp cockroachdb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable cockroachdb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database",
        "ai"
      ],
      "file": "docker-mcp/cockroachdb.md",
      "path": "docker-mcp/cockroachdb"
    },
    {
      "name": "context7",
      "display_name": "Context7",
      "category": "ai-task-management",
      "description": "Context7 MCP Server -- Up-to-date code documentation for LLMs and AI code editors.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/context7",
        "official": "https://hub.docker.com/r/mcp/context7"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/context7",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp context7",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable context7",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/context7.md",
      "path": "docker-mcp/context7"
    },
    {
      "name": "couchbase",
      "display_name": "Couchbase",
      "category": "database",
      "description": "Couchbase is a distributed document database with a powerful search engine and in-built operational and analytical capabilities.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/couchbase",
        "official": "https://hub.docker.com/r/mcp/couchbase"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/couchbase",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp couchbase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable couchbase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database",
        "search"
      ],
      "file": "docker-mcp/couchbase.md",
      "path": "docker-mcp/couchbase"
    },
    {
      "name": "curl",
      "display_name": "Curl",
      "category": "utilities",
      "description": "Standard curl tool.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/curl",
        "official": "https://hub.docker.com/r/mcp/curl"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/curl",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp curl",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable curl",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/curl.md",
      "path": "docker-mcp/curl"
    },
    {
      "name": "cyreslab-ai-shodan",
      "display_name": "Cyreslab Ai Shodan",
      "category": "ai-task-management",
      "description": "A Model Context Protocol server that provides access to Shodan API functionality.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/cyreslab-ai-shodan",
        "official": "https://hub.docker.com/r/mcp/cyreslab-ai-shodan"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/cyreslab-ai-shodan",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp cyreslab-ai-shodan",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable cyreslab-ai-shodan",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai"
      ],
      "file": "docker-mcp/cyreslab-ai-shodan.md",
      "path": "docker-mcp/cyreslab-ai-shodan"
    },
    {
      "name": "dappier",
      "display_name": "Dappier",
      "category": "ai-task-management",
      "description": "Enable fast, free real-time web search and access premium data from trusted media brands—news, financial markets, sports, entertainment, weather, and more. Build powerful AI agents with Dappier.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/dappier",
        "official": "https://hub.docker.com/r/mcp/dappier"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/dappier",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp dappier",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable dappier",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/dappier.md",
      "path": "docker-mcp/dappier"
    },
    {
      "name": "dart",
      "display_name": "Dart",
      "category": "ai-task-management",
      "description": "Dart AI Model Context Protocol (MCP) server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/dart",
        "official": "https://hub.docker.com/r/mcp/dart"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/dart",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp dart",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable dart",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/dart.md",
      "path": "docker-mcp/dart"
    },
    {
      "name": "databutton",
      "display_name": "Databutton",
      "category": "utilities",
      "description": "Databutton MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/databutton",
        "official": "https://hub.docker.com/r/mcp/databutton"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/databutton",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp databutton",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable databutton",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/databutton.md",
      "path": "docker-mcp/databutton"
    },
    {
      "name": "descope",
      "display_name": "Descope",
      "category": "ai-task-management",
      "description": "The Descope Model Context Protocol (MCP) server provides an interface to interact with Descope's Management APIs, enabling the search and retrieval of project-related information.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/descope",
        "official": "https://hub.docker.com/r/mcp/descope"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/descope",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp descope",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable descope",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "search"
      ],
      "file": "docker-mcp/descope.md",
      "path": "docker-mcp/descope"
    },
    {
      "name": "desktop-commander",
      "display_name": "Desktop Commander",
      "category": "ai-task-management",
      "description": "Search, update, manage files and run terminal commands with AI.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/desktop-commander",
        "official": "https://hub.docker.com/r/mcp/desktop-commander"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/desktop-commander",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp desktop-commander",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable desktop-commander",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/desktop-commander.md",
      "path": "docker-mcp/desktop-commander"
    },
    {
      "name": "devhub-cms",
      "display_name": "Devhub Cms",
      "category": "ai-task-management",
      "description": "DevHub CMS LLM integration through the Model Context Protocol.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/devhub-cms",
        "official": "https://hub.docker.com/r/mcp/devhub-cms"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/devhub-cms",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp devhub-cms",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable devhub-cms",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/devhub-cms.md",
      "path": "docker-mcp/devhub-cms"
    },
    {
      "name": "docker",
      "display_name": "Docker",
      "category": "cloud-infrastructure",
      "description": "Use the Docker CLI.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/docker",
        "official": "https://hub.docker.com/r/mcp/docker"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/docker",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp docker",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable docker",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "docker"
      ],
      "file": "docker-mcp/docker.md",
      "path": "docker-mcp/docker"
    },
    {
      "name": "dockerhub",
      "display_name": "Dockerhub",
      "category": "cloud-infrastructure",
      "description": "Docker Hub official MCP server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/dockerhub",
        "official": "https://hub.docker.com/r/mcp/dockerhub"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/dockerhub",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp dockerhub",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable dockerhub",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "docker"
      ],
      "file": "docker-mcp/dockerhub.md",
      "path": "docker-mcp/dockerhub"
    },
    {
      "name": "duckduckgo",
      "display_name": "Duckduckgo",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server that provides web search capabilities through DuckDuckGo, with additional features for content fetching and parsing.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/duckduckgo",
        "official": "https://hub.docker.com/r/mcp/duckduckgo"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/duckduckgo",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp duckduckgo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable duckduckgo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/duckduckgo.md",
      "path": "docker-mcp/duckduckgo"
    },
    {
      "name": "e2b",
      "display_name": "E2b",
      "category": "ai-task-management",
      "description": "Giving Claude ability to run code with E2B via MCP (Model Context Protocol).",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/e2b",
        "official": "https://hub.docker.com/r/mcp/e2b"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/e2b",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp e2b",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable e2b",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/e2b.md",
      "path": "docker-mcp/e2b"
    },
    {
      "name": "edubase",
      "display_name": "Edubase",
      "category": "ai-task-management",
      "description": "The EduBase MCP server enables Claude and other LLMs to interact with EduBase's comprehensive e-learning platform through the Model Context Protocol (MCP).",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/edubase",
        "official": "https://hub.docker.com/r/mcp/edubase"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/edubase",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp edubase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable edubase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/edubase.md",
      "path": "docker-mcp/edubase"
    },
    {
      "name": "elasticsearch",
      "display_name": "Elasticsearch",
      "category": "ai-task-management",
      "description": "Interact with your Elasticsearch indices through natural language conversations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/elasticsearch",
        "official": "https://hub.docker.com/r/mcp/elasticsearch"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/elasticsearch",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp elasticsearch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable elasticsearch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/elasticsearch.md",
      "path": "docker-mcp/elasticsearch"
    },
    {
      "name": "elevenlabs",
      "display_name": "Elevenlabs",
      "category": "ai-task-management",
      "description": "Official ElevenLabs Model Context Protocol (MCP) server that enables interaction with powerful Text to Speech and audio processing APIs.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/elevenlabs",
        "official": "https://hub.docker.com/r/mcp/elevenlabs"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/elevenlabs",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp elevenlabs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable elevenlabs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/elevenlabs.md",
      "path": "docker-mcp/elevenlabs"
    },
    {
      "name": "everart",
      "display_name": "Everart",
      "category": "api-development",
      "description": "Image generation server using EverArt's API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/everart",
        "official": "https://hub.docker.com/r/mcp/everart"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/everart",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp everart",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable everart",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/everart.md",
      "path": "docker-mcp/everart"
    },
    {
      "name": "exa",
      "display_name": "Exa",
      "category": "ai-task-management",
      "description": "Exa is a Web Search API | This is Exa MCP (Model Context Protocol).",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/exa",
        "official": "https://hub.docker.com/r/mcp/exa"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/exa",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp exa",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable exa",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "search"
      ],
      "file": "docker-mcp/exa.md",
      "path": "docker-mcp/exa"
    },
    {
      "name": "fetch",
      "display_name": "Fetch",
      "category": "productivity",
      "description": "Fetches a URL from the internet and extracts its contents as markdown.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/fetch",
        "official": "https://hub.docker.com/r/mcp/fetch"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/fetch",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp fetch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable fetch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/fetch.md",
      "path": "docker-mcp/fetch"
    },
    {
      "name": "ffmpeg",
      "display_name": "Ffmpeg",
      "category": "media-generation",
      "description": "Use ffmpeg to process video files.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/ffmpeg",
        "official": "https://hub.docker.com/r/mcp/ffmpeg"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/ffmpeg",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp ffmpeg",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable ffmpeg",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/ffmpeg.md",
      "path": "docker-mcp/ffmpeg"
    },
    {
      "name": "fibery",
      "display_name": "Fibery",
      "category": "utilities",
      "description": "Interact with your Fibery workspace.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/fibery",
        "official": "https://hub.docker.com/r/mcp/fibery"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/fibery",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp fibery",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable fibery",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/fibery.md",
      "path": "docker-mcp/fibery"
    },
    {
      "name": "filesystem",
      "display_name": "Filesystem",
      "category": "file-system",
      "description": "Local filesystem access with configurable allowed paths.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/filesystem",
        "official": "https://hub.docker.com/r/mcp/filesystem"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/filesystem",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp filesystem",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable filesystem",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/filesystem.md",
      "path": "docker-mcp/filesystem"
    },
    {
      "name": "firecrawl",
      "display_name": "Firecrawl",
      "category": "ai-task-management",
      "description": "🔥 Official Firecrawl MCP Server - Adds powerful web scraping to Cursor, Claude and any other LLM clients.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/firecrawl",
        "official": "https://hub.docker.com/r/mcp/firecrawl"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/firecrawl",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp firecrawl",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable firecrawl",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/firecrawl.md",
      "path": "docker-mcp/firecrawl"
    },
    {
      "name": "firewalla-mcp-server",
      "display_name": "Firewalla Mcp Server",
      "category": "developer-tools",
      "description": "Real-time network monitoring, security analysis, and firewall management through 28 specialized tools. Access security alerts, network flows, device status, and firewall rules directly from your Firewalla device.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/firewalla-mcp-server",
        "official": "https://hub.docker.com/r/mcp/firewalla-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/firewalla-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp firewalla-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable firewalla-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "security",
        "monitoring"
      ],
      "file": "docker-mcp/firewalla-mcp-server.md",
      "path": "docker-mcp/firewalla-mcp-server"
    },
    {
      "name": "flexprice",
      "display_name": "Flexprice",
      "category": "utilities",
      "description": "Official flexprice MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/flexprice",
        "official": "https://hub.docker.com/r/mcp/flexprice"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/flexprice",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.794Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp flexprice",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable flexprice",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/flexprice.md",
      "path": "docker-mcp/flexprice"
    },
    {
      "name": "git",
      "display_name": "Git",
      "category": "developer-tools",
      "description": "Git repository interaction and automation.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/git",
        "official": "https://hub.docker.com/r/mcp/git"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/git",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp git",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable git",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/git.md",
      "path": "docker-mcp/git"
    },
    {
      "name": "github",
      "display_name": "Github",
      "category": "developer-tools",
      "description": "Tools for interacting with the GitHub API, enabling file operations, repository management, search functionality, and more.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/github",
        "official": "https://hub.docker.com/r/mcp/github"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/github",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp github",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable github",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "github",
        "api",
        "search"
      ],
      "file": "docker-mcp/github.md",
      "path": "docker-mcp/github"
    },
    {
      "name": "github-chat",
      "display_name": "Github Chat",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) for analyzing and querying GitHub repositories using the GitHub Chat API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/github-chat",
        "official": "https://hub.docker.com/r/mcp/github-chat"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/github-chat",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp github-chat",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable github-chat",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "github",
        "api"
      ],
      "file": "docker-mcp/github-chat.md",
      "path": "docker-mcp/github-chat"
    },
    {
      "name": "github-official",
      "display_name": "Github Official",
      "category": "developer-tools",
      "description": "Official GitHub MCP Server, by GitHub. Provides seamless integration with GitHub APIs, enabling advanced automation and interaction capabilities for developers and tools.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/github-official",
        "official": "https://hub.docker.com/r/mcp/github-official"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/github-official",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp github-official",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable github-official",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "github",
        "api",
        "ai"
      ],
      "file": "docker-mcp/github-official.md",
      "path": "docker-mcp/github-official"
    },
    {
      "name": "gitlab",
      "display_name": "Gitlab",
      "category": "developer-tools",
      "description": "MCP Server for the GitLab API, enabling project management, file operations, and more.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/gitlab",
        "official": "https://hub.docker.com/r/mcp/gitlab"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/gitlab",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp gitlab",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable gitlab",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/gitlab.md",
      "path": "docker-mcp/gitlab"
    },
    {
      "name": "glif",
      "display_name": "Glif",
      "category": "ai-task-management",
      "description": "Easily run glif.app AI workflows inside your LLM: image generators, memes, selfies, and more. Glif supports all major multimedia AI models inside one app.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/glif",
        "official": "https://hub.docker.com/r/mcp/glif"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/glif",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp glif",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable glif",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/glif.md",
      "path": "docker-mcp/glif"
    },
    {
      "name": "google-maps",
      "display_name": "Google Maps",
      "category": "api-development",
      "description": "Tools for interacting with the Google Maps API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/google-maps",
        "official": "https://hub.docker.com/r/mcp/google-maps"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/google-maps",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp google-maps",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable google-maps",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/google-maps.md",
      "path": "docker-mcp/google-maps"
    },
    {
      "name": "grafana",
      "display_name": "Grafana",
      "category": "developer-tools",
      "description": "MCP server for Grafana.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/grafana",
        "official": "https://hub.docker.com/r/mcp/grafana"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/grafana",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp grafana",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable grafana",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/grafana.md",
      "path": "docker-mcp/grafana"
    },
    {
      "name": "gyazo",
      "display_name": "Gyazo",
      "category": "ai-task-management",
      "description": "Official Model Context Protocol server for Gyazo.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/gyazo",
        "official": "https://hub.docker.com/r/mcp/gyazo"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/gyazo",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp gyazo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable gyazo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/gyazo.md",
      "path": "docker-mcp/gyazo"
    },
    {
      "name": "hackle",
      "display_name": "Hackle",
      "category": "ai-task-management",
      "description": "Model Context Protocol server for Hackle.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/hackle",
        "official": "https://hub.docker.com/r/mcp/hackle"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/hackle",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp hackle",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable hackle",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/hackle.md",
      "path": "docker-mcp/hackle"
    },
    {
      "name": "handwriting-ocr",
      "display_name": "Handwriting Ocr",
      "category": "ai-task-management",
      "description": "Model Context Protocol (MCP) Server for Handwriting OCR.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/handwriting-ocr",
        "official": "https://hub.docker.com/r/mcp/handwriting-ocr"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/handwriting-ocr",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp handwriting-ocr",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable handwriting-ocr",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/handwriting-ocr.md",
      "path": "docker-mcp/handwriting-ocr"
    },
    {
      "name": "heroku",
      "display_name": "Heroku",
      "category": "utilities",
      "description": "Heroku Platform MCP Server using the Heroku CLI.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/heroku",
        "official": "https://hub.docker.com/r/mcp/heroku"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/heroku",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp heroku",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable heroku",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/heroku.md",
      "path": "docker-mcp/heroku"
    },
    {
      "name": "hostinger-mcp-server",
      "display_name": "Hostinger Mcp Server",
      "category": "api-development",
      "description": "Interact with Hostinger services over the Hostinger API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/hostinger-mcp-server",
        "official": "https://hub.docker.com/r/mcp/hostinger-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/hostinger-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp hostinger-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable hostinger-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/hostinger-mcp-server.md",
      "path": "docker-mcp/hostinger-mcp-server"
    },
    {
      "name": "hoverfly-mcp-server",
      "display_name": "Hoverfly Mcp Server",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server that exposes Hoverfly as a programmable tool for AI assistants like Cursor, Claude, GitHub Copilot, and others supporting MCP. It enables dynamic mocking of third-party APIs to unblock development, automate testing, and simulate unavailable services during integration.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/hoverfly-mcp-server",
        "official": "https://hub.docker.com/r/mcp/hoverfly-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/hoverfly-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp hoverfly-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable hoverfly-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "github",
        "api",
        "ai"
      ],
      "file": "docker-mcp/hoverfly-mcp-server.md",
      "path": "docker-mcp/hoverfly-mcp-server"
    },
    {
      "name": "husqvarna-automower",
      "display_name": "Husqvarna Automower",
      "category": "utilities",
      "description": "MCP Server for huqsvarna automower.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/husqvarna-automower",
        "official": "https://hub.docker.com/r/mcp/husqvarna-automower"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/husqvarna-automower",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp husqvarna-automower",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable husqvarna-automower",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/husqvarna-automower.md",
      "path": "docker-mcp/husqvarna-automower"
    },
    {
      "name": "hyperbrowser",
      "display_name": "Hyperbrowser",
      "category": "utilities",
      "description": "A MCP server implementation for hyperbrowser.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/hyperbrowser",
        "official": "https://hub.docker.com/r/mcp/hyperbrowser"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/hyperbrowser",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp hyperbrowser",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable hyperbrowser",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/hyperbrowser.md",
      "path": "docker-mcp/hyperbrowser"
    },
    {
      "name": "hyperspell",
      "display_name": "Hyperspell",
      "category": "utilities",
      "description": "Hyperspell MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/hyperspell",
        "official": "https://hub.docker.com/r/mcp/hyperspell"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/hyperspell",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp hyperspell",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable hyperspell",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/hyperspell.md",
      "path": "docker-mcp/hyperspell"
    },
    {
      "name": "iaptic",
      "display_name": "Iaptic",
      "category": "ai-task-management",
      "description": "Model Context Protocol server for interacting with iaptic.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/iaptic",
        "official": "https://hub.docker.com/r/mcp/iaptic"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/iaptic",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp iaptic",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable iaptic",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/iaptic.md",
      "path": "docker-mcp/iaptic"
    },
    {
      "name": "inspektor-gadget",
      "display_name": "Inspektor Gadget",
      "category": "ai-task-management",
      "description": "AI interface to troubleshoot and observe Kubernetes/Container workloads.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/inspektor-gadget",
        "official": "https://hub.docker.com/r/mcp/inspektor-gadget"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/inspektor-gadget",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp inspektor-gadget",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable inspektor-gadget",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "kubernetes",
        "ai"
      ],
      "file": "docker-mcp/inspektor-gadget.md",
      "path": "docker-mcp/inspektor-gadget"
    },
    {
      "name": "jetbrains",
      "display_name": "Jetbrains",
      "category": "ai-task-management",
      "description": "A model context protocol server to work with JetBrains IDEs: IntelliJ, PyCharm, WebStorm, etc. Also, works with Android Studio.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/jetbrains",
        "official": "https://hub.docker.com/r/mcp/jetbrains"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/jetbrains",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp jetbrains",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable jetbrains",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/jetbrains.md",
      "path": "docker-mcp/jetbrains"
    },
    {
      "name": "kagisearch",
      "display_name": "Kagisearch",
      "category": "ai-task-management",
      "description": "The Official Model Context Protocol (MCP) server for Kagi search & other tools.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/kagisearch",
        "official": "https://hub.docker.com/r/mcp/kagisearch"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/kagisearch",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp kagisearch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable kagisearch",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/kagisearch.md",
      "path": "docker-mcp/kagisearch"
    },
    {
      "name": "keboola-mcp",
      "display_name": "Keboola Mcp",
      "category": "ai-task-management",
      "description": "Keboola MCP Server is an open-source bridge between your Keboola project and modern AI tools.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/keboola-mcp",
        "official": "https://hub.docker.com/r/mcp/keboola-mcp"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/keboola-mcp",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp keboola-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable keboola-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/keboola-mcp.md",
      "path": "docker-mcp/keboola-mcp"
    },
    {
      "name": "kong",
      "display_name": "Kong",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/kong",
        "official": "https://hub.docker.com/r/mcp/kong"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/kong",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp kong",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable kong",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai"
      ],
      "file": "docker-mcp/kong.md",
      "path": "docker-mcp/kong"
    },
    {
      "name": "kubernetes",
      "display_name": "Kubernetes",
      "category": "cloud-infrastructure",
      "description": "Connect to a Kubernetes cluster and manage it.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/kubernetes",
        "official": "https://hub.docker.com/r/mcp/kubernetes"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/kubernetes",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp kubernetes",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable kubernetes",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "kubernetes"
      ],
      "file": "docker-mcp/kubernetes.md",
      "path": "docker-mcp/kubernetes"
    },
    {
      "name": "lara",
      "display_name": "Lara",
      "category": "api-development",
      "description": "Connect to Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/lara",
        "official": "https://hub.docker.com/r/mcp/lara"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/lara",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp lara",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable lara",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/lara.md",
      "path": "docker-mcp/lara"
    },
    {
      "name": "line",
      "display_name": "Line",
      "category": "ai-task-management",
      "description": "MCP server that integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/line",
        "official": "https://hub.docker.com/r/mcp/line"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/line",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp line",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable line",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai",
        "messaging"
      ],
      "file": "docker-mcp/line.md",
      "path": "docker-mcp/line"
    },
    {
      "name": "linkedin-mcp-server",
      "display_name": "Linkedin Mcp Server",
      "category": "ai-task-management",
      "description": "This MCP server allows Claude and other AI assistants to access your LinkedIn. Scrape LinkedIn profiles and companies, get your recommended jobs, and perform job searches. Set your li_at LinkedIncookie to use this server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/linkedin-mcp-server",
        "official": "https://hub.docker.com/r/mcp/linkedin-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/linkedin-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp linkedin-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable linkedin-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/linkedin-mcp-server.md",
      "path": "docker-mcp/linkedin-mcp-server"
    },
    {
      "name": "mcp-api-gateway",
      "display_name": "Mcp Api Gateway",
      "category": "ai-task-management",
      "description": "A universal MCP (Model Context Protocol) server to integrate any API with Claude Desktop using only Docker configurations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/mcp-api-gateway",
        "official": "https://hub.docker.com/r/mcp/mcp-api-gateway"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/mcp-api-gateway",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp mcp-api-gateway",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable mcp-api-gateway",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "docker",
        "api"
      ],
      "file": "docker-mcp/mcp-api-gateway.md",
      "path": "docker-mcp/mcp-api-gateway"
    },
    {
      "name": "mcp-discord",
      "display_name": "Mcp Discord",
      "category": "email-integration",
      "description": "Interact with the Discord platform.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/mcp-discord",
        "official": "https://hub.docker.com/r/mcp/mcp-discord"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/mcp-discord",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp mcp-discord",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable mcp-discord",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/mcp-discord.md",
      "path": "docker-mcp/mcp-discord"
    },
    {
      "name": "memory",
      "display_name": "Memory",
      "category": "productivity",
      "description": "Knowledge graph-based persistent memory system.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/memory",
        "official": "https://hub.docker.com/r/mcp/memory"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/memory",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp memory",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable memory",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/memory.md",
      "path": "docker-mcp/memory"
    },
    {
      "name": "metabase",
      "display_name": "Metabase",
      "category": "api-development",
      "description": "A MCP server for Metabase integration.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/metabase",
        "official": "https://hub.docker.com/r/mcp/metabase"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/metabase",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp metabase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable metabase",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/metabase.md",
      "path": "docker-mcp/metabase"
    },
    {
      "name": "minecraft-wiki",
      "display_name": "Minecraft Wiki",
      "category": "productivity",
      "description": "A MCP Server for browsing the official Minecraft Wiki!.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/minecraft-wiki",
        "official": "https://hub.docker.com/r/mcp/minecraft-wiki"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/minecraft-wiki",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp minecraft-wiki",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable minecraft-wiki",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/minecraft-wiki.md",
      "path": "docker-mcp/minecraft-wiki"
    },
    {
      "name": "mongodb",
      "display_name": "Mongodb",
      "category": "ai-task-management",
      "description": "A Model Context Protocol server to connect to MongoDB databases and MongoDB Atlas Clusters.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/mongodb",
        "official": "https://hub.docker.com/r/mcp/mongodb"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/mongodb",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp mongodb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable mongodb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/mongodb.md",
      "path": "docker-mcp/mongodb"
    },
    {
      "name": "multiversx-mx",
      "display_name": "Multiversx Mx",
      "category": "utilities",
      "description": "MCP Server for MultiversX.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/multiversx-mx",
        "official": "https://hub.docker.com/r/mcp/multiversx-mx"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/multiversx-mx",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp multiversx-mx",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable multiversx-mx",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/multiversx-mx.md",
      "path": "docker-mcp/multiversx-mx"
    },
    {
      "name": "nasdaq-data-link",
      "display_name": "Nasdaq Data Link",
      "category": "utilities",
      "description": "MCP server to interact with the data feeds provided by the Nasdaq Data Link. Developed by the community and maintained by Stefano Amorelli.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/nasdaq-data-link",
        "official": "https://hub.docker.com/r/mcp/nasdaq-data-link"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/nasdaq-data-link",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp nasdaq-data-link",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable nasdaq-data-link",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/nasdaq-data-link.md",
      "path": "docker-mcp/nasdaq-data-link"
    },
    {
      "name": "needle-mcp",
      "display_name": "Needle Mcp",
      "category": "web-search",
      "description": "Production-ready RAG service to search and retrieve data from your documents.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/needle-mcp",
        "official": "https://hub.docker.com/r/mcp/needle-mcp"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/needle-mcp",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp needle-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable needle-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/needle-mcp.md",
      "path": "docker-mcp/needle-mcp"
    },
    {
      "name": "neo4j-cloud-aura-api",
      "display_name": "Neo4j Cloud Aura Api",
      "category": "database",
      "description": "Manage Neo4j Aura database instances through the Neo4j Aura API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/neo4j-cloud-aura-api",
        "official": "https://hub.docker.com/r/mcp/neo4j-cloud-aura-api"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/neo4j-cloud-aura-api",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp neo4j-cloud-aura-api",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable neo4j-cloud-aura-api",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database",
        "api"
      ],
      "file": "docker-mcp/neo4j-cloud-aura-api.md",
      "path": "docker-mcp/neo4j-cloud-aura-api"
    },
    {
      "name": "neo4j-cypher",
      "display_name": "Neo4j Cypher",
      "category": "utilities",
      "description": "Interact with Neo4j using Cypher graph queries.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/neo4j-cypher",
        "official": "https://hub.docker.com/r/mcp/neo4j-cypher"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/neo4j-cypher",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp neo4j-cypher",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable neo4j-cypher",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/neo4j-cypher.md",
      "path": "docker-mcp/neo4j-cypher"
    },
    {
      "name": "neo4j-memory",
      "display_name": "Neo4j Memory",
      "category": "database",
      "description": "Provide persistent memory capabilities through Neo4j graph database integration.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/neo4j-memory",
        "official": "https://hub.docker.com/r/mcp/neo4j-memory"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/neo4j-memory",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp neo4j-memory",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable neo4j-memory",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/neo4j-memory.md",
      "path": "docker-mcp/neo4j-memory"
    },
    {
      "name": "neon",
      "display_name": "Neon",
      "category": "api-development",
      "description": "MCP server for interacting with Neon Management API and databases.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/neon",
        "official": "https://hub.docker.com/r/mcp/neon"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/neon",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp neon",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable neon",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database",
        "api"
      ],
      "file": "docker-mcp/neon.md",
      "path": "docker-mcp/neon"
    },
    {
      "name": "node-code-sandbox",
      "display_name": "Node Code Sandbox",
      "category": "ai-task-management",
      "description": "A Node.js–based Model Context Protocol server that spins up disposable Docker containers to execute arbitrary JavaScript.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/node-code-sandbox",
        "official": "https://hub.docker.com/r/mcp/node-code-sandbox"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/node-code-sandbox",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp node-code-sandbox",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable node-code-sandbox",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "docker",
        "database",
        "ai"
      ],
      "file": "docker-mcp/node-code-sandbox.md",
      "path": "docker-mcp/node-code-sandbox"
    },
    {
      "name": "notion",
      "display_name": "Notion",
      "category": "productivity",
      "description": "Official Notion MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/notion",
        "official": "https://hub.docker.com/r/mcp/notion"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/notion",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp notion",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable notion",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/notion.md",
      "path": "docker-mcp/notion"
    },
    {
      "name": "novita",
      "display_name": "Novita",
      "category": "ai-task-management",
      "description": "Seamless interaction with Novita AI platform resources.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/novita",
        "official": "https://hub.docker.com/r/mcp/novita"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/novita",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp novita",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable novita",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/novita.md",
      "path": "docker-mcp/novita"
    },
    {
      "name": "npm-sentinel",
      "display_name": "Npm Sentinel",
      "category": "ai-task-management",
      "description": "MCP server that enables intelligent NPM package analysis powered by AI.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/npm-sentinel",
        "official": "https://hub.docker.com/r/mcp/npm-sentinel"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/npm-sentinel",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp npm-sentinel",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable npm-sentinel",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/npm-sentinel.md",
      "path": "docker-mcp/npm-sentinel"
    },
    {
      "name": "obsidian",
      "display_name": "Obsidian",
      "category": "api-development",
      "description": "MCP server that interacts with Obsidian via the Obsidian rest API community plugin.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/obsidian",
        "official": "https://hub.docker.com/r/mcp/obsidian"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/obsidian",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp obsidian",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable obsidian",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/obsidian.md",
      "path": "docker-mcp/obsidian"
    },
    {
      "name": "okta-mcp-fctr",
      "display_name": "Okta Mcp Fctr",
      "category": "ai-task-management",
      "description": "Secure Okta identity and access management via Model Context Protocol (MCP). Access Okta users, groups, applications, logs, and policies through AI assistants with enterprise-grade security.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/okta-mcp-fctr",
        "official": "https://hub.docker.com/r/mcp/okta-mcp-fctr"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/okta-mcp-fctr",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp okta-mcp-fctr",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable okta-mcp-fctr",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "security"
      ],
      "file": "docker-mcp/okta-mcp-fctr.md",
      "path": "docker-mcp/okta-mcp-fctr"
    },
    {
      "name": "omi",
      "display_name": "Omi",
      "category": "ai-task-management",
      "description": "A Model Context Protocol server for Omi interaction and automation. This server provides tools to read, search, and manipulate Memories and Conversations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/omi",
        "official": "https://hub.docker.com/r/mcp/omi"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/omi",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp omi",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable omi",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/omi.md",
      "path": "docker-mcp/omi"
    },
    {
      "name": "onlyoffice-docspace",
      "display_name": "Onlyoffice Docspace",
      "category": "productivity",
      "description": "ONLYOFFICE DocSpace is a room-based collaborative platform which allows organizing a clear file structure depending on users' needs or project goals.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/onlyoffice-docspace",
        "official": "https://hub.docker.com/r/mcp/onlyoffice-docspace"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/onlyoffice-docspace",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp onlyoffice-docspace",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable onlyoffice-docspace",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/onlyoffice-docspace.md",
      "path": "docker-mcp/onlyoffice-docspace"
    },
    {
      "name": "openapi-schema",
      "display_name": "Openapi Schema",
      "category": "ai-task-management",
      "description": "OpenAPI Schema Model Context Protocol Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/openapi-schema",
        "official": "https://hub.docker.com/r/mcp/openapi-schema"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/openapi-schema",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp openapi-schema",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable openapi-schema",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/openapi-schema.md",
      "path": "docker-mcp/openapi-schema"
    },
    {
      "name": "openbnb-airbnb",
      "display_name": "Openbnb Airbnb",
      "category": "utilities",
      "description": "MCP Server for searching Airbnb and get listing details.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/openbnb-airbnb",
        "official": "https://hub.docker.com/r/mcp/openbnb-airbnb"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/openbnb-airbnb",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp openbnb-airbnb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable openbnb-airbnb",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/openbnb-airbnb.md",
      "path": "docker-mcp/openbnb-airbnb"
    },
    {
      "name": "openweather",
      "display_name": "Openweather",
      "category": "api-development",
      "description": "A simple MCP service that provides current weather and 5-day forecast using the free OpenWeatherMap API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/openweather",
        "official": "https://hub.docker.com/r/mcp/openweather"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/openweather",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp openweather",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable openweather",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/openweather.md",
      "path": "docker-mcp/openweather"
    },
    {
      "name": "opik",
      "display_name": "Opik",
      "category": "ai-task-management",
      "description": "Model Context Protocol (MCP) implementation for Opik enabling seamless IDE integration and unified access to prompts, projects, traces, and metrics.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/opik",
        "official": "https://hub.docker.com/r/mcp/opik"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/opik",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp opik",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable opik",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/opik.md",
      "path": "docker-mcp/opik"
    },
    {
      "name": "osp-marketing-tools",
      "display_name": "Osp Marketing Tools",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server that empowers LLMs to use some of Open Srategy Partners' core writing and product marketing techniques.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/osp_marketing_tools",
        "official": "https://hub.docker.com/r/mcp/osp_marketing_tools"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/osp_marketing_tools",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp osp_marketing_tools",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable osp_marketing_tools",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/osp_marketing_tools.md",
      "path": "docker-mcp/osp_marketing_tools"
    },
    {
      "name": "oxylabs",
      "display_name": "Oxylabs",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server that enables AI assistants like Claude to seamlessly access web data through Oxylabs' powerful web scraping technology.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/oxylabs",
        "official": "https://hub.docker.com/r/mcp/oxylabs"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/oxylabs",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp oxylabs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable oxylabs",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "ai"
      ],
      "file": "docker-mcp/oxylabs.md",
      "path": "docker-mcp/oxylabs"
    },
    {
      "name": "paper-search",
      "display_name": "Paper Search",
      "category": "ai-task-management",
      "description": "A MCP for searching and downloading academic papers from multiple sources like arXiv, PubMed, bioRxiv, etc.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/paper-search",
        "official": "https://hub.docker.com/r/mcp/paper-search"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/paper-search",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp paper-search",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable paper-search",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "search"
      ],
      "file": "docker-mcp/paper-search.md",
      "path": "docker-mcp/paper-search"
    },
    {
      "name": "perplexity-ask",
      "display_name": "Perplexity Ask",
      "category": "ai-task-management",
      "description": "Connector for Perplexity API, to enable real-time, web-wide research.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/perplexity-ask",
        "official": "https://hub.docker.com/r/mcp/perplexity-ask"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/perplexity-ask",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp perplexity-ask",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable perplexity-ask",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "search"
      ],
      "file": "docker-mcp/perplexity-ask.md",
      "path": "docker-mcp/perplexity-ask"
    },
    {
      "name": "pinecone",
      "display_name": "Pinecone",
      "category": "ai-task-management",
      "description": "Pinecone Assistant MCP server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/pinecone",
        "official": "https://hub.docker.com/r/mcp/pinecone"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/pinecone",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp pinecone",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable pinecone",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/pinecone.md",
      "path": "docker-mcp/pinecone"
    },
    {
      "name": "playwright",
      "display_name": "Playwright",
      "category": "browser-automation",
      "description": "Playwright MCP server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/playwright",
        "official": "https://hub.docker.com/r/mcp/playwright"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/playwright",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp playwright",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable playwright",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/playwright.md",
      "path": "docker-mcp/playwright"
    },
    {
      "name": "playwright-mcp-server",
      "display_name": "Playwright Mcp Server",
      "category": "ai-task-management",
      "description": "Playwright Model Context Protocol Server - Tool to automate Browsers and APIs in Claude Desktop, Cline, Cursor IDE and More 🔌.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/playwright-mcp-server",
        "official": "https://hub.docker.com/r/mcp/playwright-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/playwright-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp playwright-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable playwright-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/playwright-mcp-server.md",
      "path": "docker-mcp/playwright-mcp-server"
    },
    {
      "name": "pluggedin-mcp-proxy",
      "display_name": "Pluggedin Mcp Proxy",
      "category": "ai-task-management",
      "description": "A unified MCP proxy that aggregates multiple MCP servers into one interface, enabling seamless tool discovery and management across all your AI interactions. Manage all your MCP servers from a single connection point with RAG capabilities and real-time notifications.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/pluggedin-mcp-proxy",
        "official": "https://hub.docker.com/r/mcp/pluggedin-mcp-proxy"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/pluggedin-mcp-proxy",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp pluggedin-mcp-proxy",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable pluggedin-mcp-proxy",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/pluggedin-mcp-proxy.md",
      "path": "docker-mcp/pluggedin-mcp-proxy"
    },
    {
      "name": "postgres",
      "display_name": "Postgres",
      "category": "database",
      "description": "Connect with read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/postgres",
        "official": "https://hub.docker.com/r/mcp/postgres"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/postgres",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp postgres",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable postgres",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/postgres.md",
      "path": "docker-mcp/postgres"
    },
    {
      "name": "pref-editor",
      "display_name": "Pref Editor",
      "category": "utilities",
      "description": "Pref Editor is a tool for viewing and editing Android app preferences during development.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/pref-editor",
        "official": "https://hub.docker.com/r/mcp/pref-editor"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/pref-editor",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp pref-editor",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable pref-editor",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/pref-editor.md",
      "path": "docker-mcp/pref-editor"
    },
    {
      "name": "pulumi",
      "display_name": "Pulumi",
      "category": "utilities",
      "description": "Pulumi MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/pulumi",
        "official": "https://hub.docker.com/r/mcp/pulumi"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/pulumi",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp pulumi",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable pulumi",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/pulumi.md",
      "path": "docker-mcp/pulumi"
    },
    {
      "name": "puppeteer",
      "display_name": "Puppeteer",
      "category": "productivity",
      "description": "Browser automation and web scraping using Puppeteer.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/puppeteer",
        "official": "https://hub.docker.com/r/mcp/puppeteer"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/puppeteer",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp puppeteer",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable puppeteer",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/puppeteer.md",
      "path": "docker-mcp/puppeteer"
    },
    {
      "name": "razorpay",
      "display_name": "Razorpay",
      "category": "utilities",
      "description": "Razorpay's Official MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/razorpay",
        "official": "https://hub.docker.com/r/mcp/razorpay"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/razorpay",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp razorpay",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable razorpay",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/razorpay.md",
      "path": "docker-mcp/razorpay"
    },
    {
      "name": "redis",
      "display_name": "Redis",
      "category": "database",
      "description": "Access to Redis database operations.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/redis",
        "official": "https://hub.docker.com/r/mcp/redis"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/redis",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp redis",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable redis",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/redis.md",
      "path": "docker-mcp/redis"
    },
    {
      "name": "redis-cloud",
      "display_name": "Redis Cloud",
      "category": "ai-task-management",
      "description": "MCP Server for Redis Cloud's API, allowing you to manage your Redis Cloud resources using natural language.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/redis-cloud",
        "official": "https://hub.docker.com/r/mcp/redis-cloud"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/redis-cloud",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp redis-cloud",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable redis-cloud",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/redis-cloud.md",
      "path": "docker-mcp/redis-cloud"
    },
    {
      "name": "ref",
      "display_name": "Ref",
      "category": "developer-tools",
      "description": "Ref powerful search tool connets your coding tools with documentation context. It includes an up-to-date index of public documentation and it can ingest your private documentation (eg. GitHub repos, PDFs) as well.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/ref",
        "official": "https://hub.docker.com/r/mcp/ref"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/ref",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.792Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp ref",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable ref",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "github",
        "search"
      ],
      "file": "docker-mcp/ref.md",
      "path": "docker-mcp/ref"
    },
    {
      "name": "render",
      "display_name": "Render",
      "category": "utilities",
      "description": "Interact with your Render resources via LLMs.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/render",
        "official": "https://hub.docker.com/r/mcp/render"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/render",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp render",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable render",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/render.md",
      "path": "docker-mcp/render"
    },
    {
      "name": "resend",
      "display_name": "Resend",
      "category": "email-integration",
      "description": "Send emails directly from Cursor with this email sending MCP server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/resend",
        "official": "https://hub.docker.com/r/mcp/resend"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/resend",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp resend",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable resend",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/resend.md",
      "path": "docker-mcp/resend"
    },
    {
      "name": "risken",
      "display_name": "Risken",
      "category": "utilities",
      "description": "RISKEN's official MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/risken",
        "official": "https://hub.docker.com/r/mcp/risken"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/risken",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp risken",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable risken",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/risken.md",
      "path": "docker-mcp/risken"
    },
    {
      "name": "root",
      "display_name": "Root",
      "category": "cloud-infrastructure",
      "description": "MCP server that provides container image vulnerability scanning and remediation capabilities through Root.io.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/root",
        "official": "https://hub.docker.com/r/mcp/root"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/root",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp root",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable root",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/root.md",
      "path": "docker-mcp/root"
    },
    {
      "name": "schogini-mcp-image-border",
      "display_name": "Schogini Mcp Image Border",
      "category": "media-generation",
      "description": "This adds a border to an image and returns base64 encoded image.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/schogini-mcp-image-border",
        "official": "https://hub.docker.com/r/mcp/schogini-mcp-image-border"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/schogini-mcp-image-border",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp schogini-mcp-image-border",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable schogini-mcp-image-border",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/schogini-mcp-image-border.md",
      "path": "docker-mcp/schogini-mcp-image-border"
    },
    {
      "name": "scrapegraph",
      "display_name": "Scrapegraph",
      "category": "utilities",
      "description": "ScapeGraph MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/scrapegraph",
        "official": "https://hub.docker.com/r/mcp/scrapegraph"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/scrapegraph",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp scrapegraph",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable scrapegraph",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/scrapegraph.md",
      "path": "docker-mcp/scrapegraph"
    },
    {
      "name": "scrapezy",
      "display_name": "Scrapezy",
      "category": "ai-task-management",
      "description": "A Model Context Protocol server for Scrapezy that enables AI models to extract structured data from websites.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/scrapezy",
        "official": "https://hub.docker.com/r/mcp/scrapezy"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/scrapezy",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp scrapezy",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable scrapezy",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/scrapezy.md",
      "path": "docker-mcp/scrapezy"
    },
    {
      "name": "sec-edgar",
      "display_name": "Sec Edgar",
      "category": "database",
      "description": "MCP server to interact with the US SEC EDGAR database, developed by the community and maintained by Stefano Amorelli.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/sec-edgar",
        "official": "https://hub.docker.com/r/mcp/sec-edgar"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/sec-edgar",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp sec-edgar",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable sec-edgar",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database",
        "ai"
      ],
      "file": "docker-mcp/sec-edgar.md",
      "path": "docker-mcp/sec-edgar"
    },
    {
      "name": "securenote-link-mcp-server",
      "display_name": "Securenote Link Mcp Server",
      "category": "ai-task-management",
      "description": "SecureNote.link MCP Server - allowing AI agents to securely share sensitive information through end-to-end encrypted notes.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/securenote-link-mcp-server",
        "official": "https://hub.docker.com/r/mcp/securenote-link-mcp-server"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/securenote-link-mcp-server",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp securenote-link-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable securenote-link-mcp-server",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/securenote-link-mcp-server.md",
      "path": "docker-mcp/securenote-link-mcp-server"
    },
    {
      "name": "sentry",
      "display_name": "Sentry",
      "category": "ai-task-management",
      "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io. This server provides tools to inspect error reports, stacktraces, and other debugging information from your Sentry account.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/sentry",
        "official": "https://hub.docker.com/r/mcp/sentry"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/sentry",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp sentry",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable sentry",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/sentry.md",
      "path": "docker-mcp/sentry"
    },
    {
      "name": "sequentialthinking",
      "display_name": "Sequentialthinking",
      "category": "utilities",
      "description": "Dynamic and reflective problem-solving through thought sequences.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/sequentialthinking",
        "official": "https://hub.docker.com/r/mcp/sequentialthinking"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/sequentialthinking",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp sequentialthinking",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable sequentialthinking",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/sequentialthinking.md",
      "path": "docker-mcp/sequentialthinking"
    },
    {
      "name": "shopify",
      "display_name": "Shopify",
      "category": "utilities",
      "description": "Shopify.dev MCP server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/shopify",
        "official": "https://hub.docker.com/r/mcp/shopify"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/shopify",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp shopify",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable shopify",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/shopify.md",
      "path": "docker-mcp/shopify"
    },
    {
      "name": "singlestore",
      "display_name": "Singlestore",
      "category": "api-development",
      "description": "MCP server for interacting with SingleStore Management API and services.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/singlestore",
        "official": "https://hub.docker.com/r/mcp/singlestore"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/singlestore",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp singlestore",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable singlestore",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/singlestore.md",
      "path": "docker-mcp/singlestore"
    },
    {
      "name": "slack",
      "display_name": "Slack",
      "category": "api-development",
      "description": "Interact with Slack Workspaces over the Slack API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/slack",
        "official": "https://hub.docker.com/r/mcp/slack"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/slack",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp slack",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable slack",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/slack.md",
      "path": "docker-mcp/slack"
    },
    {
      "name": "smartbear",
      "display_name": "Smartbear",
      "category": "api-development",
      "description": "SmartBear's official MCP Server for API Hub, Test Hub and Insight Hub.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/smartbear",
        "official": "https://hub.docker.com/r/mcp/smartbear"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/smartbear",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp smartbear",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable smartbear",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/smartbear.md",
      "path": "docker-mcp/smartbear"
    },
    {
      "name": "sonarqube",
      "display_name": "Sonarqube",
      "category": "cloud-infrastructure",
      "description": "Interact with SonarQube Cloud, Server and Community build over the web API. Analyze code to identify quality and security issues.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/sonarqube",
        "official": "https://hub.docker.com/r/mcp/sonarqube"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/sonarqube",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp sonarqube",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable sonarqube",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api",
        "security"
      ],
      "file": "docker-mcp/sonarqube.md",
      "path": "docker-mcp/sonarqube"
    },
    {
      "name": "sqlite",
      "display_name": "SQLite",
      "category": "database",
      "description": "Database interaction and business intelligence capabilities.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/sqlite",
        "official": "https://hub.docker.com/r/mcp/sqlite"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/sqlite",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.793Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp sqlite",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable sqlite",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "database"
      ],
      "file": "docker-mcp/sqlite.md",
      "path": "docker-mcp/sqlite"
    },
    {
      "name": "stripe",
      "display_name": "Stripe",
      "category": "api-development",
      "description": "Interact with Stripe services over the Stripe API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/stripe",
        "official": "https://hub.docker.com/r/mcp/stripe"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/stripe",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp stripe",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable stripe",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/stripe.md",
      "path": "docker-mcp/stripe"
    },
    {
      "name": "suzieq",
      "display_name": "Suzieq",
      "category": "developer-tools",
      "description": "MCP Server to interact with a SuzieQ network observability instance via its REST API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/suzieq",
        "official": "https://hub.docker.com/r/mcp/suzieq"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/suzieq",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp suzieq",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable suzieq",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/suzieq.md",
      "path": "docker-mcp/suzieq"
    },
    {
      "name": "task-orchestrator",
      "display_name": "Task Orchestrator",
      "category": "ai-task-management",
      "description": "Model Context Protocol (MCP) server for comprehensive task and feature management, providing AI assistants with a structured, context-efficient way to interact with project data.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/task-orchestrator",
        "official": "https://hub.docker.com/r/mcp/task-orchestrator"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/task-orchestrator",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp task-orchestrator",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable task-orchestrator",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/task-orchestrator.md",
      "path": "docker-mcp/task-orchestrator"
    },
    {
      "name": "tavily",
      "display_name": "Tavily",
      "category": "web-search",
      "description": "The Tavily MCP server provides seamless interaction with the tavily-search and tavily-extract tools, real-time web search capabilities through the tavily-search tool and Intelligent data extraction from web pages via the tavily-extract tool.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/tavily",
        "official": "https://hub.docker.com/r/mcp/tavily"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/tavily",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp tavily",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable tavily",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai",
        "search"
      ],
      "file": "docker-mcp/tavily.md",
      "path": "docker-mcp/tavily"
    },
    {
      "name": "tembo",
      "display_name": "Tembo",
      "category": "cloud-infrastructure",
      "description": "MCP server for Tembo Cloud's platform API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/tembo",
        "official": "https://hub.docker.com/r/mcp/tembo"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/tembo",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp tembo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable tembo",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/tembo.md",
      "path": "docker-mcp/tembo"
    },
    {
      "name": "terraform",
      "display_name": "Terraform",
      "category": "cloud-infrastructure",
      "description": "The Terraform MCP Server provides seamless integration with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/terraform",
        "official": "https://hub.docker.com/r/mcp/terraform"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/terraform",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp terraform",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable terraform",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/terraform.md",
      "path": "docker-mcp/terraform"
    },
    {
      "name": "text-to-graphql",
      "display_name": "Text To Graphql",
      "category": "ai-task-management",
      "description": "Transform natural language queries into GraphQL queries using an AI agent. Provides schema management, query validation, execution, and history tracking.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/text-to-graphql",
        "official": "https://hub.docker.com/r/mcp/text-to-graphql"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/text-to-graphql",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp text-to-graphql",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable text-to-graphql",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "ai"
      ],
      "file": "docker-mcp/text-to-graphql.md",
      "path": "docker-mcp/text-to-graphql"
    },
    {
      "name": "tigris",
      "display_name": "Tigris",
      "category": "cloud-infrastructure",
      "description": "Tigris is a globally distributed S3-compatible object storage service that provides low latency anywhere in the world, enabling developers to store and access any amount of data for a wide range of use cases.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/tigris",
        "official": "https://hub.docker.com/r/mcp/tigris"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/tigris",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp tigris",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable tigris",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/tigris.md",
      "path": "docker-mcp/tigris"
    },
    {
      "name": "time",
      "display_name": "Time",
      "category": "utilities",
      "description": "Time and timezone conversion capabilities.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/time",
        "official": "https://hub.docker.com/r/mcp/time"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/time",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp time",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable time",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/time.md",
      "path": "docker-mcp/time"
    },
    {
      "name": "triplewhale",
      "display_name": "Triplewhale",
      "category": "utilities",
      "description": "Triplewhale MCP Server.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/triplewhale",
        "official": "https://hub.docker.com/r/mcp/triplewhale"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/triplewhale",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp triplewhale",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable triplewhale",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/triplewhale.md",
      "path": "docker-mcp/triplewhale"
    },
    {
      "name": "veyrax",
      "display_name": "Veyrax",
      "category": "utilities",
      "description": "VeyraX MCP is the only connection you need to access all your tools in any MCP-compatible environment.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/veyrax",
        "official": "https://hub.docker.com/r/mcp/veyrax"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/veyrax",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp veyrax",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable veyrax",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/veyrax.md",
      "path": "docker-mcp/veyrax"
    },
    {
      "name": "vizro",
      "display_name": "Vizro",
      "category": "utilities",
      "description": "provides tools and templates to create a functioning Vizro chart or dashboard step by step.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/vizro",
        "official": "https://hub.docker.com/r/mcp/vizro"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/vizro",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp vizro",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable vizro",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/vizro.md",
      "path": "docker-mcp/vizro"
    },
    {
      "name": "web-browser",
      "display_name": "Web Browser MCP Server",
      "category": "web",
      "description": "Browse the web, interact with pages, and extract content using Puppeteer",
      "server_type": "stdio",
      "protocol_version": "1.1.0",
      "verification": {
        "status": "community",
        "last_tested": "2025-01-15",
        "tested_with": [
          "claude-3.5",
          "cursor"
        ],
        "security_audit": false
      },
      "sources": {
        "npm": "@modelcontextprotocol/server-puppeteer",
        "github": "modelcontextprotocol/servers/tree/main/src/puppeteer",
        "marketplace": {
          "smithery": "https://smithery.ai/server/web-browser"
        }
      },
      "security": {
        "auth_type": "none",
        "permissions": [
          "browser:navigate",
          "browser:interact",
          "browser:screenshot",
          "content:extract"
        ],
        "resource_indicators": false,
        "elicitation_schema": null
      },
      "stats": {
        "github_stars": 1567,
        "npm_downloads": 45000,
        "last_updated": "2025-01-15"
      },
      "installation_methods": [
        {
          "type": "npm",
          "recommended": true,
          "command": "npm install -g @modelcontextprotocol/server-puppeteer",
          "config_example": "{\n  \"mcpServers\": {\n    \"web-browser\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"],\n      \"env\": {\n        \"HEADLESS\": \"true\"\n      }\n    }\n  }\n}\n"
        },
        {
          "type": "manual",
          "steps": [
            "git clone https://github.com/modelcontextprotocol/servers",
            "cd servers/src/puppeteer",
            "npm install && npm run build",
            "node dist/index.js"
          ]
        }
      ],
      "tags": [
        "browser",
        "web-scraping",
        "automation",
        "puppeteer"
      ],
      "file": "mcp-servers/community/web-browser.md",
      "path": "community/web-browser"
    },
    {
      "name": "webflow",
      "display_name": "Webflow",
      "category": "ai-task-management",
      "description": "Model Context Protocol (MCP) server for the Webflow Data API.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/webflow",
        "official": "https://hub.docker.com/r/mcp/webflow"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/webflow",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp webflow",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable webflow",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [
        "api"
      ],
      "file": "docker-mcp/webflow.md",
      "path": "docker-mcp/webflow"
    },
    {
      "name": "wikipedia-mcp",
      "display_name": "Wikipedia Mcp",
      "category": "ai-task-management",
      "description": "A Model Context Protocol (MCP) server that retrieves information from Wikipedia to provide context to LLMs.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/wikipedia-mcp",
        "official": "https://hub.docker.com/r/mcp/wikipedia-mcp"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/wikipedia-mcp",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp wikipedia-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable wikipedia-mcp",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/wikipedia-mcp.md",
      "path": "docker-mcp/wikipedia-mcp"
    },
    {
      "name": "wolfram-alpha",
      "display_name": "Wolfram Alpha",
      "category": "email-integration",
      "description": "Connect your chat repl to wolfram alpha computational intelligence.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/wolfram-alpha",
        "official": "https://hub.docker.com/r/mcp/wolfram-alpha"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/wolfram-alpha",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp wolfram-alpha",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable wolfram-alpha",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/wolfram-alpha.md",
      "path": "docker-mcp/wolfram-alpha"
    },
    {
      "name": "youtube-transcript",
      "display_name": "Youtube Transcript",
      "category": "media-generation",
      "description": "Retrieves transcripts for given YouTube video URLs.",
      "server_type": "stdio",
      "protocol_version": "1.0.0",
      "execution_type": "local",
      "verification": {
        "status": "verified",
        "maintainer": "Docker",
        "last_tested": "2025-08-07",
        "tested_with": [
          "claude-3.5",
          "claude-code"
        ]
      },
      "sources": {
        "docker": "https://hub.docker.com/r/mcp/youtube_transcript",
        "official": "https://hub.docker.com/r/mcp/youtube_transcript"
      },
      "source_registry": {
        "type": "docker",
        "url": "https://hub.docker.com/r/mcp/youtube_transcript",
        "verified_by": "Docker",
        "last_fetched": "2025-08-07T13:34:54.795Z"
      },
      "installation_methods": [
        {
          "type": "bwc",
          "recommended": true,
          "command": "bwc add --mcp youtube_transcript",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit",
            "BWC CLI"
          ]
        },
        {
          "type": "docker",
          "command": "docker mcp server enable youtube_transcript",
          "requirements": [
            "Docker Desktop",
            "Docker MCP Toolkit"
          ]
        }
      ],
      "tags": [],
      "file": "docker-mcp/youtube_transcript.md",
      "path": "docker-mcp/youtube_transcript"
    }
  ]
}